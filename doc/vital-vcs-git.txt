*vital-vcs-git.txt*		A fundemental Git manipulation library

Version: 0.1.0
Author:  Alisue <lambdalisue@hashnote.net>	*Vital.VCS.Git-author*
Support: Vim 7.3 and above
License: MIT license  {{{
	Copyright (c) 2014 Alisue, hashnote.net

	Permission is hereby granted, free of charge, to any person obtaining
	a copy of this software and associated documentation files
	(the "Software"), to deal in the Software without restriction,
	including without limitation the rights to use, copy, modify, merge,
	publish, distribute, sublicense, and/or sell copies of the Software,
	and to permit persons to whom the Software is furnished to do so,
	subject to the following conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
CONTENTS				*Vital.VCS.Git-contents*

Introductions		|Vital.VCS.Git-introduction|
Requirements		|Vital.VCS.Git-requirements|
Usage			|Vital.VCS.Git-usage|
Interface		|Vital.VCS.Git-interface|
  Functions		|Vital.VCS.Git-funcionss|


==============================================================================
INTRODUCTIONS				*Vital.VCS.Git-introduction*

*Vital.VCS.Git* is a fundemental git manipulation library powerd by vital.vim.
It provide the following features.

1. Find a git repository recursively from a specified path
2. Parse a git repository config (.git/config)
2. Parse a git config (git config --list)
3. Parse a git status (git status --porcelain)
4. Parse a git commit status (git commit --dry-run --porcelain)
5. Fetch a git meta information (e.g. current branch name)
6. Execute a git command

The library try to NOT use git command and try to cache result as much as
possible to improve the response. With this strategy, the response speed would
100 times faster than executing git command everytime.

General vim plugin developer do not need to know but if you want to manipulate
git in low level, the following submodules would help you.

- |Vital.VCS.Git.Core| - A core function module of Git manipulation
- |Vital.VCS.Git.Finder| - A fast git repository finder
- |Vital.VCS.Git.ConfigParser| - A Git config parser
- |Vital.VCS.Git.StatusParser| - A Git status parser
- |Vital.VCS.Git.BlameParser| - A Git blame parser
- |Vital.VCS.Git.Conflict| - A helper library for manipulating conflicts

All modules above provide a low level API and do not cache any results,
contrusting to |Vital.VCS.Git| which try to cache things per each git
repository.

Benchmark: https://gist.github.com/lambdalisue/c73ad37a33b8242fba13


==============================================================================
REQUIREMENTS				*Vital.VCS.Git-requirements*

The following external vital modules are required to bundle |Vital.VCS.Git|.

- vital-System-Cache-Unified
  https://github.com/lambdalisue/vital-System-Cache-Unified

Note that the external vital modules above are required only when you want to
bundle |Vital.VCS.Git| into your plugin. After you bundle it, the modules are
no longer required, mean that your plugin users do not required to install the
modules.


==============================================================================
USAGE					*Vital.VCS.Git-usage*

First of all, call |Vital.VCS.Git.new()| or |Vital.VCS.Git.find()| to create
a git instance. The instance will cached per each git working tree.
>
	let s:G = s:V.import('VCS.Git')
	" find a git working tree and repository to create a Git instance
	let git = s:G.find(expand('%'))
<
Then you can get meta information of the repository with
|Vital.VCS.Git-instance.get_meta()|
>
	let meta = git.get_meta()
	" echo current branch
	echo meta.local.branch_name
	" echo remote branch of current branch
	echo meta.remote.branch_name
<
To call a git command, call |Vital.VCS.Git-instance.exec()|.
>
	call git.exec(['rev-parse', '--is-inside-work-tree'])
<
To bundle |Vital.VCS.Git| into your plugin, call |Vitalize| as
>
	:Vitalize --name=your_plugin_name . +VCS.Git
<
It will automatically bundle |Vital.VCS.Git| and required vital modules to
your plugin.


==============================================================================
INTERFACE				*Vital.VCS.Git-interface*

------------------------------------------------------------------------------
FUNCTIONS				*Vital.VCS.Git-functions*

get_config()			*Vital.VCS.Git.get_config()*

	Return a config |Dictionary|. Following attributes are available.

	'executable'
	A |String| or |Dictionary| used to execute a git command (used in
	|Vital.VCS.Git.Core.exec()|.
	The default value is 'git'

	'arguments'
	A |List| used to execute a git command (used in
	|Vital.VCS.Git.Core.exec()|.
	The default value is ['-c', 'color.ui=false']

	'cache'
	A dictinary to regulate cache mechanism of each features.
	One of the vital-System-Cache-Unified class is available to specify.

		'finder'
		An unified cache system used for |Vital.VCS.Git.Finder|.
		The default value is |Vital.System.Cache.Memory|.

		'instance'
		An unified cache system used for cache a git instance per each
		git working tree.
		The default value is |Vital.System.Cache.Memory|.

		'repository'
		An unified cache system used for cache repository information
		of each git instance.
		The default value is |Vital.System.Cache.Memory|.

		'uptime'
		An unified cache system used for uptime of each files of each
		git instance.
		The default value is |Vital.System.Cache.Memory|.


set_config({config})		*Vital.VCS.Git.set_config()*

	Set a config |Dictionary|. See |Vital.VCS.Git.get_config()| for
	available attributes of {config}.
				
				*Vital.VCS.Git.new()*
new({worktree}, {repository}[, {opts}])

	Create or get a git instance of {worktree}. If a git instance of
	{worktree} exists in 'instance' cache explained in
	|Vital.VCS.Git.get_config()|, it return the cached instance. Otherwise
	it create a new git instance.
	Following attributes are available in the git instance

	'worktree'
	A worktree path which the git instance belongs

	'repository'
	A repository path (.git directory) which the git instance connect.

	'cache'
	A |Dictonary| which contains a cache instance of 'repository' and
	'uptime' explained in |Vital.VCS.Git.get_config()|.


	If { 'no_cache': 1 } is specified to {opts}, a new git instance will
	be created even a git instance of {worktree} found in a cache.
	See |Vital.VCS.Git.find()| as well.

find({path}[, {opts}])		*Vital.VCS.Git.find()*

	Create or get a git instance of a git working tree which {path}
	belongs. It will return an empty |Dictionary| if no git working tree
	is found in parents directories of {path}.
	See |Vital.VCS.Git.new()| for attributes of the instance.
	See |Vital.VCS.Git.Finder-instance.find()| for extra options of {opts}.

------------------------------------------------------------------------------
METHODS						*Vital.VCS.Git-methods*

Note:
Most of functions are just ported from |Vital.VCS.Git.Core| so check the
documentation of that for detail.

			*Vital.VCS.Git-instance.is_updated()*
is_updated({filename})

	Return 0 or 1. It return 1 when {filename} in a git repository is
	updated or this execution is first time. Otherwise it return 0.
	Note that this method is for checking a file modification in git
	repository and not working tree.
	The value is obtained by |getftime| function.

			*Vital.VCS.Git-instance.get_relative_path()*
get_relative_path({path})

	Return a relative path of {path} from the working tree which the git
	instance belongs.
	See |Vital.VCS.Git.Core.get_relative_path()| for more detail.

			*Vital.VCS.Git-instance.get_absolute_path()*
get_absolute_path({path})

	Return an absolute path of {path} from the working tree which the git
	instance belongs.
	See |Vital.VCS.Git.Core.get_absolute_path()| for more detail.

			*Vital.VCS.Git-instance.get_head()*
get_head()

	Return a current reference that a git repository lookin at.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_fetch_head()*
get_fetch_head()

	Return a SHAs of branch/remote heads that were updated during the last
	git fetch.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_orig_head()*
get_orig_head()

	Return a SHAs of the branch you're merging into during a merge.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_merge_head()*
get_merge_head()

	Return a SHAs of the branch you're merging from during a merge.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_cherry_pick_head()*
get_cherry_pick_head()

	Return a SHAs of the branch you're picking during a cherry pick.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_revert_head()*
get_recert_head()

	Return a SHAs of the branch you're reverting during a revert.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_bisect_log()*
get_bisect_log()

	Return a log content of the bisect.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.is_merging()*
is_merging()

	Return 0 or 1 to indicate if the branch is in merge mode.

				*Vital.VCS.Git-instance.is_cherry_picking()*
is_cherry_picking()

	Return 0 or 1 to indicate if the branch is in cherry pick mode.

				*Vital.VCS.Git-instance.is_reverting()*
is_reverting()

	Return 0 or 1 to indicate if the branch is in revert mode.

				*Vital.VCS.Git-instance.is_bisecting()*
is_bisecting()

	Return 0 or 1 to indicate if the branch is in bisect mode.

				*Vital.VCS.Git-instance.is_rebase_merging()*
is_rebase_merging()

	Return 0 or 1 to indicate if the branch is in rebase merge mode.

			*Vital.VCS.Git-instance.is_rebase_merging_interactive()*
is_rebase_merging_interactive()

	Return 0 or 1 to indicate if the branch is in interactive rebase merge
	mode.

				*Vital.VCS.Git-instance.is_rebase_applying()*
is_rebase_applying()

	Return 0 or 1 to indicate if the branch is in rebase apply mode.

			*Vital.VCS.Git-instance.is_rebase_applying_rebase()*
is_rebase_applying_rebase()

	Return 0 or 1 to indicate if the branch is in rebase apply rebase
	mode.

			*Vital.VCS.Git-instance.is_rebase_applying_am()*
is_rebase_applying_am()

	Return 0 or 1 to indicate if the branch is in rebase apply AM
	mode.

					*Vital.VCS.Git-instance.get_mode()*
get_mode()

	Return a |String| which indicate the current mode of the {repository}
	in.
	It use a similar method to determine the mode as '__git_ps1' function
	of 'git-prompt.sh' provided by git itself.
	https://github.com/git/git/blob/dd160d7/contrib/completion/git-prompt.sh#L391-L460

	One of the following values possibly be returned.

	'REBASE-i step/total'	interactive merge rebase with step/total
	'REBASE-m step/total'	merge rebase with step/total
	'REBASE step/total'	rebase with step/total
	'AM step/total'		am with step/total
	'AM/REBASE step/total'	am/rebase with step/total
	'MERGING'		merge
	'CHERRY-PICKING'	cherry pick
	'REVERTING'		revert
	'BISECTING'		bisect
	''			otherwise

				*Vital.VCS.Git-instance.get_commit_editmsg()*
get_commit_editmsg()

	Return a cached commit message in a git repository. This is a last
	commit message in general.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_merge_msg()*
get_merge_msg()

	Return a commit message shown during merge mode.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_local_hash()*
get_local_hash({branch})

	Return a hash reference of a specified local branch.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_remote_hash()*
get_remote_hash({remote}, {branch})

	Return a hash reference of a specified remote branch.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_repository_config()*
get_repository_config()

	Return a parsed config dictionary of a git repository.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_branch_remote()*
get_branch_remote({branch})

	Return a remote name of the specified {local_branch}.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_branch_merge()*
get_branch_merge({branch})

	Return a remote branch name of the {local_branch} connected.
	The return value will be cached until a corresponding file is updated.
	You may need to execute the following code to clop name.
>
	let merge = s:Core.get_branch_merge(config, 'master')
	let remote_branch_name = substitute(merge, '^refs/heads', '', '')
<
				*Vital.VCS.Git-instance.get_remote_fetch()*
get_remote_fetch({remote})

	Return an fetch address of the specified {remote}.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_remote_url()*
get_remote_url({remote})

	Return an url of the specified {remote}.
	The return value will be cached until a corresponding file is updated.

				*Vital.VCS.Git-instance.get_comment_char()*
get_comment_char()

	Return an comment character used in commit message.
	The return value will be cached until a corresponding file is updated.

			*Vital.VCS.Git-instance.exec()*
exec({args}[, {opts}])

	Execute a git command specified in {args}.
	The working tree of the git instance automatically specified as '-C'
	option.
	See |Vital.VCS.Git.Core.exec()| for more detail.

get_version()		*Vital.VCS.Git-instance.get_version()*

	Return a git version via 'git --version' command.
	If the command fail, it return '0.0.0' instead.

			*Vital.VCS.Git-instance.get_last_commitmsg()*
get_last_commitmsg([{opts}])

	Return a last commit message. Generally it is equal to
	'commit_editmsg' attribute of a return dictionary from
	|Vital.VCS.Git.get_meta()| but this is more acculate.
	The {opts} are passed to |Vital.VCS.Git-instance.exec()| and {opts.args}
	will be used as extra arguments if specified.

	If { 'no_cache': 1 } is specified to {opts}, it won't use any cached
	string. Otherwise it will use cached string until 'index' file in a
	git repository is updated.

			*Vital.VCS.Git-instance.count_commits_ahead_of_remote()*
count_commits_ahead_of_remote([{opts}])

	Return a |Number| of commits ahead of connected remote (outgoing
	commits).
	The {opts} are passed to |Vital.VCS.Git-instance.exec()| and {opts.args}
	will be used as extra arguments if specified.

	If { 'no_cache': 1 } is specified to {opts}, it won't use any cached
	number. Otherwise it will use cached number until 'index' file in a
	git repository is updated.

			*Vital.VCS.Git-instance.count_commits_behind_remote()*
count_commits_behind_remote([{opts}])

	Return a |Number| of commits behind connected remote (incoming
	commits).
	The {opts} are passed to |Vital.VCS.Git-instance.exec()| and {opts.args}
	will be used as extra arguments if specified.

	If { 'no_cache': 1 } is specified to {opts}, it won't use any cached
	number. Otherwise it will use cached number until 'index' file in a
	git repository is updated.

get_meta()		*Vital.VCS.Git-instance.get_meta()*

	Return a dictionary which contains meta informations of the repository.
	The following meta informations are included:

	'head'
	A value returnd from |Vital.VCS.Git.get_head()|

	'last_commitmsg'
	A last commitmsg. If 'commit_editmsg' is not empty, it return that.
	Otherwise it call |Vital.VCS.Git-instance.get_last_commitmsg()|.
	Note: COMMIT_EDITMSG does not refer a correct last commit message when
	user just close/pull the branch.

	'local'
	A |Dictionary| of local repository information which has the following attributes

		'name'
		A current repository name determined from the directory name
		of the repository

		'branch_name'
		A current branch name.
		
		'branch_hash'
		A hash reference of a current branch.

	'remote'
	A |Dictionary| of remote repository of current branch information which has the
	following attributes

		'name'
		A name of the remote. Usually it is 'origin'

		'branch_name'
		A remote branch name which is connected to the current local
		branch.
		
		'branch_hash'
		A hash reference of a current remote branch.

		'url'
		A url of the remote.

vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
