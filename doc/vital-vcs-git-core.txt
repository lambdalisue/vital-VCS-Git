*vital-vcs-git-core.txt*	A core functions of Git manipulation

Version: 0.1.0
Author:  Alisue <lambdalisue@hashnote.net>	*Vital.VCS.Git.Core-author*
Support: Vim 7.3 and above
License: MIT license  {{{
	Copyright (c) 2014 Alisue, hashnote.net

	Permission is hereby granted, free of charge, to any person obtaining
	a copy of this software and associated documentation files
	(the "Software"), to deal in the Software without restriction,
	including without limitation the rights to use, copy, modify, merge,
	publish, distribute, sublicense, and/or sell copies of the Software,
	and to permit persons to whom the Software is furnished to do so,
	subject to the following conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}


==============================================================================
CONTENTS				*Vital.VCS.Git.Core-contents*

Introduction		|Vital.VCS.Git.Core-introduction|
Functions		|Vital.VCS.Git.Core-functions|


==============================================================================
INTRODUCTION				*Vital.VCS.Git.Core-introduction*

*Vital.VCS.Git.Core* is a core function module of |Vital.VCS.Git|.
The module should not be used directly while |Vital.VCS.Git| provide more
user friendly and efficient APIs.

==============================================================================
FUNCTIONS				*Vital.VCS.Git.Core-functions*

get_config()				*Vital.VCS.Git.Core.get_config()*

	Get a configure dictionary. {config} may contains the followings.

	'executable'
	An executable |String| or |List| which is used as a first argument of
	|Vital.VCS.Git.Core.system()| function called internally from 
	|Vital.VCS.Git.Core.exec()| function.
	The default value is 'git'

	'arguments'
	A list of extra arguments of |Vital.VCS.Git.Core.system()| function
	called internally from |Vital.VCS.Git.Core.exec()| function.
	The default value is ['-c', 'color.ui=false']

set_config({config})			*Vital.VCS.Git.Core.set_config()*

	Set a configure dictionary. See |Vital.VCS.Git.Core.get_config()| for
	available keys of {config} dictionary.

find_worktree({path}			*Vital.VCS.Git.Core.find_worktree()*

	Try to find a top path of a git working tree recursively from a
	specified directory of {path} or a parent directory of {path} when the
	{path} points a file.
	It return an absolute path if a working tree found. Otherwise it
	return an empty string.

find_repository({worktree}		*Vital.VCS.Git.Core.find_repository()*

	It return an absolute path of a repository path which the {worktree}
	path points.
	{worktree} should be obtained by |Vital.VCS.Git.Core.find_worktree()|.

				*Vital.VCS.Git.Core.get_relative_path()*
get_relative_path({worktree}, {path})
	
	Return a relative path of the {path} from the {worktree}.
	It throw an exception if the {path} is already a relative path.

				*Vital.VCS.Git.Core.get_absolute_path()*
get_absolute_path({worktree}, {path})

	Return an absolute path of the {path} which is relative from the
	{worktree}.
	It throw an exception if the {path} is already an absolute path.

				*Vital.VCS.Git.Core.get_head()*
get_head({repository})

	Return a current reference that the {repository} lookin at.

				*Vital.VCS.Git.Core.get_fetch_head()*
get_fetch_head({repository})

	Return a SHAs of branch/remote heads that were updated during the last
	git fetch

				*Vital.VCS.Git.Core.get_orig_head()*
get_orig_head({repository})

	Return a SHAs of the branch you're merging into during a merge.

				*Vital.VCS.Git.Core.get_merge_head()*
get_merge_head({repository})

	Return a SHAs of the branch you're merging from during a merge.

			*Vital.VCS.Git.Core.get_rebase_merge_head()*
get_rebase_merge_head({repository})

	Return a content of 'rebase-merge/head-name' in the {repository}

			*Vital.VCS.Git.Core.get_rebase_merge_step()*
get_rebase_merge_step({repository})

	Return a content of 'rebase-merge/msgnum' in the {repository}

			*Vital.VCS.Git.Core.get_rebase_merge_total()*
get_rebase_merge_total({repository})

	Return a content of 'rebase-merge/end' in the {repository}

			*Vital.VCS.Git.Core.get_rebase_apply_head()*
get_rebase_apply_head({repository})

	Return a content of 'rebase-apply/head-name' in the {repository}

			*Vital.VCS.Git.Core.get_rebase_apply_step()*
get_rebase_apply_step({repository})

	Return a content of 'rebase-apply/next' in the {repository}

			*Vital.VCS.Git.Core.get_rebase_apply_total()*
get_rebase_apply_total({repository})

	Return a content of 'rebase-apply/total' in the {repository}

			*Vital.VCS.Git.Core.get_cherry_pick_head()*
get_cherry_pick_head({repository})

	Return a content of 'CHERRY_PICK_HEAD' in the {repository}

			*Vital.VCS.Git.Core.get_revert_head()*
get_revert_head({repository})

	Return a content of 'REVERT_HEAD' in the {repository}

			*Vital.VCS.Git.Core.get_bisect_log()*
get_bisect_log({repository})

	Return a content of 'BISECT_LOG' in the {repository}

			*Vital.VCS.Git.Core.is_merging()*
is_merging({repository})

	Return 0 or 1 to indicate the {repository} is in merge mode.
	It just return the existence of a corresponding file and does not
	refer the real situation. See |Vital.VCS.Git.Core.get_mode()| for
	getting the real situation.

			*Vital.VCS.Git.Core.is_cherry_picking()*
is_cherry_picking({repository})

	Return 0 or 1 to indicate the {repository} is in cherry-pick mode.
	It just return the existence of a corresponding file and does not
	refer the real situation. See |Vital.VCS.Git.Core.get_mode()| for
	getting the real situation.

			*Vital.VCS.Git.Core.is_reverting()*
is_reverting({repository})

	Return 0 or 1 to indicate the {repository} is in revert mode.
	It just return the existence of a corresponding file and does not
	refer the real situation. See |Vital.VCS.Git.Core.get_mode()| for
	getting the real situation.

			*Vital.VCS.Git.Core.is_bisecting()*
is_bisecting({repository})

	Return 0 or 1 to indicate the {repository} is in bisect mode.
	It just return the existence of a corresponding file and does not
	refer the real situation. See |Vital.VCS.Git.Core.get_mode()| for
	getting the real situation.

			*Vital.VCS.Git.Core.is_rebase_merging()*
is_rebase_merging({repository})

	Return 0 or 1 to indicate the {repository} is in rebase merge mode.
	It just return the existence of a corresponding file and does not
	refer the real situation. See |Vital.VCS.Git.Core.get_mode()| for
	getting the real situation.

			*Vital.VCS.Git.Core.is_rebase_merging_interactive()*
is_rebase_merging_interactive({repository})

	Return 0 or 1 to indicate the {repository} is in interactive rebase
	merge mode.
	It just return the existence of a corresponding file and does not
	refer the real situation. See |Vital.VCS.Git.Core.get_mode()| for
	getting the real situation.

			*Vital.VCS.Git.Core.is_rebase_applying()*
is_rebase_applying({repository})

	Return 0 or 1 to indicate the {repository} is in rebase apply mode.
	It just return the existence of a corresponding file and does not
	refer the real situation. See |Vital.VCS.Git.Core.get_mode()| for
	getting the real situation.

			*Vital.VCS.Git.Core.is_rebase_applying_rebase()*
is_rebase_applying_rebase({repository})

	Return 0 or 1 to indicate the {repository} is in rebase apply rebase
	mode.
	It just return the existence of a corresponding file and does not
	refer the real situation. See |Vital.VCS.Git.Core.get_mode()| for
	getting the real situation.

			*Vital.VCS.Git.Core.is_rebase_applying_am()*
is_rebase_applying_am({repository})

	Return 0 or 1 to indicate the {repository} is in rebase apply am mode.
	It just return the existence of a corresponding file and does not
	refer the real situation. See |Vital.VCS.Git.Core.get_mode()| for
	getting the real situation.

					*Vital.VCS.Git.Core.get_mode()*
get_mode({repository})

	Return a |String| which indicate the current mode of the {repository}
	in.
	It use a similar method to determine the mode as '__git_ps1' function
	of 'git-prompt.sh' provided by git itself.
	https://github.com/git/git/blob/dd160d7/contrib/completion/git-prompt.sh#L391-L460

				*Vital.VCS.Git.Core.get_commit_editmsg()*
get_commit_editmsg({repository})

	Return a cached commit message in the {repository}. This is a last
	commit message in general.

				*Vital.VCS.Git.Core.get_merge_msg()*
get_merge_msg({repository})

	Return a commit message shown during merge mode.

				*Vital.VCS.Git.Core.get_local_hash()*
get_local_hash({repository}, {branch})

	Return a hash reference of a specified local branch.

				*Vital.VCS.Git.Core.get_remote_hash()*
get_remote_hash({repository}, {remote}, {branch})

	Return a hash reference of a specified remote branch.

				*Vital.VCS.Git.Core.get_repository_config()*
get_repository_config({repository})

	Return a parsed config dictionary of the {repository}. The return
	{config} will be used in the following functions.

				*Vital.VCS.Git.Core.get_branch_remote()*
get_branch_remote({config}, {local_branch})

	Return a remote name of the specified {local_branch}.

				*Vital.VCS.Git.Core.get_branch_merge()*
get_branch_merge({config}, {local_branch})

	Return a remote branch name of the {local_branch} connected.
	You may need to execute the following code to clop name.
>
	let merge = s:Core.get_branch_merge(config, 'master')
	let remote_branch_name = substitute(merge, '^refs/heads', '', '')
<
				*Vital.VCS.Git.Core.get_remote_fetch()*
get_remote_fetch({config}, {remote})

	Return an fetch address of the specified {remote}.

				*Vital.VCS.Git.Core.get_remote_url()*
get_remote_url({config}, {remote})

	Return an url of the specified {remote}.

				*Vital.VCS.Git.Core.get_comment_char()*
get_comment_char({config})

	Return an comment character used in commit message.

system({args} [, {opts}])		*Vital.VCS.Git.Core.system()*

	Execute exterenal commands specified in {args} (|List|) via |system()| or
	|vimproc#system()| if available. The {args} will be flatten via
	|Vital.Data.List.flatten()| internally.
	It return {result} (|Dictionary|) which contains 'status', 'stdout',
	'args', and 'opts'. {opts} is a |Dictionary| to configure the
	execution.

	{opts}

		'stdin'
		A |String| which will be used as a 'input' argument of
		|system()| or |vimproc#system()| function. If empty string is
		specified (default), nothing will be passed to the function to
		prevent E677 exception.

		'timeout'
		A |Number| which will be used as a 'timeout' argument of
		|vimproc#system()| function if available.

	{result}

		'status'
		A |Number| which indicate the execution exit status.

		'stdout'
		A |String| which indicate stdout of the execution. A trailing
		newline ('\n' or '\r\n') are removed.

		'args'
		A |List| which indicate an actual {args} passed into
		|system()| or |vimproc#system()|

		'opts'
		A |Dictionary| equals to {opts}

				*Vital.VCS.Git.Core.system_interactive()*
system_interactive({args})

	An experimental function.
	Execute external commands specified in {args} (|List|) via |:!| to
	allow interactive commands. The {args} will be flatten via
	|Vital.Data.List.flatten()| internally.
	It return {result} (|Dictionary|) which contains 'status', 'stdout',
	'args', and 'opts'.

	{result}

		'status'
		A |Number| which indicate the execution exit status.

		'stdout'
		A |String| which indicate stdout of the execution. A trailing
		newline ('\n' or '\r\n') are removed.

		'args'
		A |List| which indicate an actual {args} passed into
		|system()| or |vimproc#system()|

		'opts'
		A |Dictionary| equals to {opts}

exec({args} [, {opts}])			*Vital.VCS.Git.Core.exec()*

	Execute a Git command specified in {args} (|List|) via
	|Vital.VCS.Git.Core.system()| function.
	|Vital.VCS.Git.Core.executable| and |Vital.VCS.Git.Core.arguments|
	will be added to {args} before execution. {opts} is a |Dictionary|
	similar to {opts} in |Vital.VCS.Git.Core.system()|. The function
	special argument is listed below:

	{opts}

		'interactive'
		Use |Vital.VCS.Git.Core.system_interactive()| rather than
		|Vital.VCS.Git.Core.system()| to allow interactive commands.
		(Experimentally)

get_version()				*Vital.VCS.Git.Core.get_version()*

	Return a Git version via 'git --version' command.
	If the command fail, it return '0.0.0' instead.

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
