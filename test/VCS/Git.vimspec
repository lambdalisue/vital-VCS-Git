let s:V = vital#of('vital')
let s:P = s:V.import('System.Filepath')
let s:L = s:V.import('Data.List')
call s:V.unload() " make sure that the following modules are not cached version
let s:G = s:V.import('VCS.Git')

Describe VCS.Git
  Before all
    " Create a mock Git working tree
    let root = tempname()
    let worktree = s:P.join(root, 'inside')
    let repository = s:P.join(worktree, '.git')
    let inside = s:P.join(worktree, 'foo', 'bar')
    let outside = s:P.join(root, 'outside', 'foo', 'bar')
    lockvar root
    lockvar worktree
    lockvar repository
    lockvar inside
    lockvar outside
    call mkdir(inside, 'p')
    call mkdir(outside, 'p')

    let s:worktree = worktree
    function! s:exec(...) abort " {{{
      let args = s:L.flatten([
            \ 'git',
            \ '-C', s:worktree,
            \ a:000
            \])
      silent execute printf('!%s', join(args))
    endfunction " }}}

    " initialize a git directory
    call writefile(['foo'], s:P.join(inside, 'foo.txt'))
    call s:exec('init', '-q', worktree)
    call s:exec('config', 'user.name', '"Alisue"')
    call s:exec('config', 'user.email', '"lambdalisue@hashnote.net"')
    call s:exec('add', '.')
    call s:exec('commit', '-q', '-m', '"initial"')
  End

  After all
    " remote a temp directory
    call s:V.import('System.File').rmdir(root, 'r')
  End

  Context .new({worktree}, {repository})
    It should return a Git instance
      let ret = s:G.new(worktree, repository)
      Assert IsDict(ret)
      Assert KeyExists(ret, 'worktree')
      Assert KeyExists(ret, 'repository')
      Assert KeyExists(ret, 'cache')
      Assert KeyExists(ret.cache, 'repository')
      Assert KeyExists(ret.cache, 'uptime')
    End

    It should return a same Git instance for same worktree
      let ret1 = s:G.new(worktree, repository)
      let ret2 = s:G.new(worktree, repository)
      Assert Same(ret1, ret2)
    End

    It should return a different Git instance for same worktree if 'no_cache' is specified
      let ret1 = s:G.new(worktree, repository)
      let ret2 = s:G.new(worktree, repository, { 'no_cache': 1 })
      Assert NotSame(ret1, ret2)
    End


    It should return a different Git instance for different worktree
      let ret1 = s:G.new(worktree, repository)
      let ret2 = s:G.new(outside, repository)
      Assert NotSame(ret1, ret2)
    End
  End

  Context .find({path})
    It should return a Git instance for a directory which locate inside a Git worktree
      let path = inside
      let exp = s:G.new(worktree, repository)
      let ret = s:G.find(path)
      Assert Same(ret, exp)
    End

    It should return a same Git instance for directories which locate inside a same Git worktree
      let path1 = inside
      let path2 = s:P.join(inside, 'piyo')
      let ret1 = s:G.find(path1)
      let ret2 = s:G.find(path2)
      Assert Same(ret1, ret2)
    End

    It should return an empty dictionary for non git directory
      let path = outside
      let ret = s:G.find(path)
      Assert True(empty(ret))
    End
  End

  Context instance
    Before
      " newly create a Git instance
      let s:git = s:G.new(worktree, repository, { 'no_cache': 1 })

      function! s:git.patch_is_updated() abort " {{{
        function! self.is_updated(...) abort
          return reltime()[0] + 1000
        endfunction
      endfunction " }}}
    End

    Context .is_updated({pathspec})
      It should return 1 for filenames which does not exists in a git repository
        let ret = s:git.is_updated('invalid_filename')
        Assert Equals(ret, 1)
      End

      It should return 1 for valid filename in a first time execution
        let filename = s:P.join(repository, 'foo')
        call writefile([], filename)
        let ret = s:git.is_updated('foo')
        Assert Equals(ret, 1)
        call delete(filename)
      End

      It should return 0 for valid filename after the first time execution
        let filename = s:P.join(repository, 'foo')
        call writefile([], filename)
        call s:git.is_updated('foo')
        let ret = s:git.is_updated('foo')
        Assert Equals(ret, 0)
        call delete(filename)
      End
    End

    Context .get_relative_path({path})
      It should return a relative path of an absolute {path}
        let path = inside
        let exp = s:P.join(['foo', 'bar'])
        let ret = s:git.get_relative_path(path)
        Assert Equals(ret, exp)
      End

      It should return a {path} if {path} is not absolute path
        let path = s:P.join(['foo', 'bar'])
        let exp = path
        let ret = s:git.get_relative_path(path)
        Assert Equals(ret, exp)
      End
    End

    Context .get_absolute_path({path})
      It should return an absolute path of a relative {path}
        let path = s:P.join(['foo', 'bar'])
        let exp = inside
        let ret = s:git.get_absolute_path(path)
        Assert Equals(ret, exp)
      End

      It should return a {path} if {path} is not relative path
        let path = inside
        let exp = path
        let ret = s:git.get_absolute_path(path)
        Assert Equals(ret, exp)
      End
    End

    Context .get_head([{options}])
      It should return a content of HEAD as a string
        let ret = s:git.get_head()
        Assert IsString(ret)
      End
    End

    Context .get_fetch_head([{options}])
      It should return a content of FETCH_HEAD as a list
        let ret = s:git.get_fetch_head()
        Assert IsList(ret)
      End
    End

    Context .get_orig_head([{options}])
      It should return a content of ORIG_HEAD as a string
        let ret = s:git.get_orig_head()
        Assert IsString(ret)
      End
    End

    Context .get_merge_head([{options}])
      It should return a content of MERGE_HEAD as a string
        let ret = s:git.get_merge_head()
        Assert IsString(ret)
      End
    End

    Context .get_commit_editmsg([{options}])
      It should return a content of COMMIT_EDITMSG as a list
        let ret = s:git.get_commit_editmsg()
        Assert IsList(ret)
      End
    End

    Context .get_merge_msg([{options}])
      It should return a content of MERGE_MSG as a list
        let ret = s:git.get_merge_msg()
        Assert IsList(ret)
      End
    End

    Context .get_local_hash({branch}, [{options}])
      It should return a hash string of a specified branch
        let ret = s:git.get_local_hash('master')
        Assert IsString(ret)
      End
    End

    Context .get_remote_hash({remote}, {branch}, [{options}])
      It should return a hash string of a specified branch
        let ret = s:git.get_remote_hash('origin', 'master')
        Assert IsString(ret)
      End
    End

    Context .get_repository_config([{options}])
      It should return a config dictionary
        let ret = s:git.get_repository_config()
        Assert IsDict(ret)
      End

      It should return a same config dictionary if the repository is not updated
        let ret1 = s:git.get_repository_config()
        let ret2 = s:git.get_repository_config()
        Assert Same(ret1, ret2)
      End

      It should return a different config dictionary if the repository is not updated
        let ret1 = s:git.get_repository_config()
        call s:git.patch_is_updated()
        let ret2 = s:git.get_repository_config()
        Assert NotSame(ret1, ret2)
      End
    End

    Context .get_branch_remote({branch}[, {options}])
      It should reutnr a branch remote string
        let ret = s:git.get_branch_remote('master')
        Assert IsString(ret)
      End
    End

    Context .get_branch_merge({branch}[, {options}])
      It should reutnr a branch merge string
        let ret = s:git.get_branch_merge('master')
        Assert IsString(ret)
      End
    End

    Context .get_remote_fetch({remote}[, {options}])
      It should reutnr a remote fetch string
        let ret = s:git.get_remote_fetch('origin')
        Assert IsString(ret)
      End
    End

    Context .get_remote_url({remote}[, {options}])
      It should reutnr a remote url string
        let ret = s:git.get_remote_url('origin')
        Assert IsString(ret)
      End
    End

    Context .get_comment_char({remote}[, {options}])
      It should reutnr a comment char string
        let ret = s:git.get_comment_char()
        Assert IsString(ret)
      End
    End

    Context .get_last_commitmsg([{options}])
      It should return a latest commit message
        let result = s:git.get_last_commitmsg()
        Assert IsList(result)
        Assert Equals(result, ['initial'])
      End

      It should return a same list if the repository is not updated
        let ret1 = s:git.get_last_commitmsg()
        let ret2 = s:git.get_last_commitmsg()
        Assert Same(ret1, ret2)
      End

      It should return a different list if the repository is updated
        let ret1 = s:git.get_last_commitmsg()
        call s:git.patch_is_updated()
        let ret2 = s:git.get_last_commitmsg()
        Assert NotSame(ret1, ret2)
      End
    End

    Context .count_commits_ahead_of_remote([{options}])
      It should return a number
        let result = s:git.count_commits_ahead_of_remote()
        Assert IsNumber(result)
      End
    End

    Context .count_commits_behind_remote([{options}])
      It should return a number
        let result = s:git.count_commits_behind_remote()
        Assert IsNumber(result)
      End
    End

    Context .get_meta()
      It should return a dictionary which indicate the meta information of the Git repository
        let ret = s:git.get_meta()
        Assert KeyExists(ret, 'head')
        Assert KeyExists(ret, 'fetch_head')
        Assert KeyExists(ret, 'orig_head')
        Assert KeyExists(ret, 'merge_head')
        Assert KeyExists(ret, 'commit_editmsg')
        Assert KeyExists(ret, 'last_commitmsg')
        Assert KeyExists(ret, 'merge_msg')
        Assert KeyExists(ret, 'current_branch')
        Assert KeyExists(ret, 'current_branch_hash')
        Assert KeyExists(ret, 'repository_config')
        Assert KeyExists(ret, 'current_branch_remote')
        Assert KeyExists(ret, 'current_branch_merge')
        Assert KeyExists(ret, 'current_remote_fetch')
        Assert KeyExists(ret, 'current_remote_url')
        Assert KeyExists(ret, 'comment_char')
        Assert KeyExists(ret, 'current_remote_branch')
        Assert KeyExists(ret, 'current_remote_branch_hash')
      End
    End

    Context .exec({args} [, {opts}])
      It should execute git command on a top directory of the worktree
        let result = s:git.exec(['rev-parse', '--show-toplevel'])
        let expect = {
              \ 'status': 0,
              \ 'stdout': resolve(worktree),
              \ 'args': ['git', '-c', 'color.ui=false', '--no-pager', '-C', worktree, 'rev-parse', '--show-toplevel'],
              \ 'opts': {'stdin': '', 'timeout': 0},
              \}
        Assert Equals(result, expect)
      End
    End
  End
End
