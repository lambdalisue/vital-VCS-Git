let s:V = vital#of('vital')
let s:P = s:V.import('System.Filepath')
let s:L = s:V.import('Data.List')
call s:V.unload() " make sure that the following modules are not cached version
let s:M = s:V.import('VCS.Git.Misc')

let s:ROOT = getcwd()

Describe VCS.Git.Misc
  Context .count_commits_ahead_of_remote([{path}, {options}])
    It should return number
      let path = s:ROOT
      let result = s:M.count_commits_ahead_of_remote(path)
      Assert IsNumber(result)
    End
  End

  Context .count_commits_behind_remote([{path}, {options}])
    It should return number
      let path = s:ROOT
      let result = s:M.count_commits_behind_remote(path)
      Assert IsNumber(result)
    End
  End

  Context .get_local_branch_name([{path}, {options}])
    It should return a string
      let result = s:M.get_local_branch_name(s:ROOT)
      Assert IsString(result)
    End
  End

  Context .get_remote_branch_name([{path}, {options}])
    It should return a string
      let result = s:M.get_remote_branch_name(s:ROOT)
      Assert IsString(result)
    End
  End

  Context .get_status([{path}, {options}])
    It should return a dictionary
      let result = s:M.get_parsed_status(s:ROOT)
      Assert IsDict(result)
    End
  End

  Context .get_config([{path}, {options}])
    It should return a dictionary
      let result = s:M.get_parsed_config(s:ROOT)
      Assert IsDict(result)
    End
  End

  Context .get_last_commit_hashref([{path}, {options}])
    It should return a string
      let result = s:M.get_last_commit_hashref(s:ROOT)
      Assert IsString(result)
    End
  End
  Context .get_last_commit_message([{path}, {options}])
    It should return a string
      let result = s:M.get_last_commit_message(s:ROOT)
      Assert IsString(result)
    End
  End
End
