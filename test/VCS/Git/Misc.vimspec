call vital#of('vital').unload()
let s:V = vital#of('vital')
let s:P = s:V.import('System.Filepath')
let s:L = s:V.import('Data.List')
let s:M = s:V.import('VCS.Git.Misc')

let s:ROOT = getcwd()

Describe VCS.Git.Misc
  Before all
    " Create a mock Git working tree
    let root = tempname()
    let worktree = s:P.join(root, 'inside')
    let repository = s:P.join(worktree, '.git')
    let inside = s:P.join(worktree, 'foo', 'bar')
    let outside = s:P.join(root, 'outside', 'foo', 'bar')
    lockvar root
    lockvar worktree
    lockvar repository
    lockvar inside
    lockvar outside
    call mkdir(repository, 'p')
    call mkdir(inside, 'p')
    call mkdir(outside, 'p')
    silent execute printf('!git init -q %s', worktree)
    let previous_cwd = getcwd()
    silent execute 'lcd ' inside
  End

  After all
    silent execute 'lcd ' previous_cwd
    " remote a temp directory
    call s:V.import('System.File').rmdir(root, 'r')
  End

  Context .count_commits_ahead_of_remote([{options}])
    It should return number
      let result = s:M.count_commits_ahead_of_remote()
      Assert IsNumber(result)
    End
  End

  Context .count_commits_behind_remote([{options}])
    It should return number
      let result = s:M.count_commits_behind_remote()
      Assert IsNumber(result)
    End
  End

  Context .get_last_commitmsg([{options}])
    It should return a list
      silent execute '!git commit -q -m "initial" --allow-empty'
      let result = s:M.get_last_commitmsg()
      Assert IsList(result)
      Assert Equals(result, ['initial'])
    End
  End

  Context .get_parsed_status([{options}])
    It should return a dictionary
      let ret = s:M.get_parsed_status()
      Assert IsDict(ret)
      Assert KeyNotExists(ret, 'current_branch')
      Assert KeyNotExists(ret, 'remote_branch')
    End

    It should add extra arguments specified
      let ret = s:M.get_parsed_status({ 'branch': 1 })
      Assert IsDict(ret)
      Assert KeyExists(ret, 'current_branch')
      Assert KeyExists(ret, 'remote_branch')
    End
  End

  Context .get_parsed_commit([{options}])
    It should return a dictionary
      let ret = s:M.get_parsed_commit()
      Assert IsDict(ret)
      Assert KeyNotExists(ret, 'current_branch')
      Assert KeyNotExists(ret, 'remote_branch')
    End
  End

  Context .get_parsed_config([{options}])
    It should return a dictionary
      let result = s:M.get_parsed_config()
      Assert IsDict(result)
    End
  End

  Context .get_meta({repository}[, {options}])
    It should return a dictionary which indicate the meta information of the Git repository
      let ret = s:M.get_meta(repository)
      Assert IsDict(ret)
      Assert KeyExists(ret, 'head')
      Assert KeyExists(ret, 'fetch_head')
      Assert KeyExists(ret, 'orig_head')
      Assert KeyExists(ret, 'merge_head')
      Assert KeyExists(ret, 'merge_mode')
      Assert KeyExists(ret, 'commit_editmsg')
      Assert KeyExists(ret, 'merge_msg')
      Assert KeyExists(ret, 'current_branch')
      Assert KeyExists(ret, 'repository_config')
      Assert KeyExists(ret, 'current_branch_remote')
      Assert KeyExists(ret, 'current_branch_merge')
      Assert KeyExists(ret, 'current_remote_url')
      Assert KeyExists(ret, 'comment_char')
    End

    It should exclude repository config related keys in the return dictionary if 'exclude_repository_config' is specified
      let ret = s:M.get_meta(repository, { 'exclude_repository_config': 1 })
      Assert IsDict(ret)
      Assert KeyExists(ret, 'head')
      Assert KeyExists(ret, 'fetch_head')
      Assert KeyExists(ret, 'orig_head')
      Assert KeyExists(ret, 'merge_head')
      Assert KeyExists(ret, 'merge_mode')
      Assert KeyExists(ret, 'commit_editmsg')
      Assert KeyExists(ret, 'merge_msg')
      Assert KeyExists(ret, 'current_branch')
      Assert KeyNotExists(ret, 'repository_config')
      Assert KeyNotExists(ret, 'current_branch_remote')
      Assert KeyNotExists(ret, 'current_branch_merge')
      Assert KeyNotExists(ret, 'current_remote_url')
      Assert KeyNotExists(ret, 'comment_char')
    End
  End
End
