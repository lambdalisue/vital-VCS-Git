call vital#of('vital').unload()
let s:V = vital#of('vital')
let s:P = s:V.import('System.Filepath')
let s:C = s:V.import('System.Cache.Simple')
let s:F = s:V.import('VCS.Git.Finder')


Describe VCS.Git.Finder
  Before all
    " Create a mock Git working tree
    let root = tempname()
    let worktree = s:P.join(root, 'inside')
    let repository = s:P.join(worktree, '.git')
    let inside = s:P.join(worktree, 'foo', 'bar')
    let outside = s:P.join(root, 'outside', 'foo', 'bar')
    lockvar root
    lockvar worktree
    lockvar repository
    lockvar inside
    lockvar outside
    call mkdir(repository, 'p')
    call mkdir(inside, 'p')
    call mkdir(outside, 'p')
  End

  After all
    " remote a temp directory
    call s:V.import('System.File').rmdir(root, 'r')
  End

  Context .new({cache})
    It should throw a exception if invalid cache instance is specified
      let Finder = s:F
      Throws Finder.new({})
    End

    It should return a finder instance
      let cache = s:C.new()
      let finder = s:F.new(cache)
      Assert KeyExists(finder, 'find')
      Assert KeyExists(finder, 'clear')
      Assert KeyExists(finder, 'gc')
    End

    Context .find({path}[, {options}])
      Before each
        let s:finder = s:F.new(s:C.new())
      End

      It should return a dictionary which contains 'worktree' and 'repository'
        let path = inside
        let ret = s:finder.find(path)
        let exp = {
              \ 'worktree': worktree,
              \ 'repository': repository,
              \}
        Assert IsDict(ret)
        Assert HasKey(ret, 'worktree')
        Assert HasKey(ret, 'repository')
        Assert Equals(ret, exp)
      End

      It should return an empty dictionary for a non git working tree
        let path = outside
        let ret = s:finder.find(path)
        let exp = {}
        Assert IsDict(ret)
        Assert Equals(ret, exp)
      End
    End

    Context .clear()
      Before each
        let s:cache = s:C.new()
        let s:finder = s:F.new(s:cache)
      End

      It should clear all cache
        call s:cache.set('foo', 'bar')
        call s:cache.set('hoge', 'hoge')
        call s:finder.clear()
        let r = s:cache.keys()
        Assert Equals(r, [])
      End
    End

    Context .gc()
      Before each
        let s:cache = s:C.new()
        let s:finder = s:F.new(s:cache)
      End

      It should execute garbage collection
        call s:cache.set('foo', {
              \ 'path': inside,
              \ 'worktree': worktree,
              \ 'repository': repository,
              \})
        call s:cache.set('bar', {
              \ 'path': worktree,
              \ 'worktree': '',
              \ 'repository': '',
              \})
        call s:cache.set('hoge', {
              \ 'path': outside,
              \ 'worktree': '',
              \ 'repository': '',
              \})
        call s:cache.set('piyo', {
              \ 'path': s:P.join(root, 'invalid'),
              \ 'worktree': '',
              \ 'repository': '',
              \})
        call s:finder.gc()
        let keys = s:cache.keys()
        Assert Equals(sort(keys), sort(['foo', 'bar', 'hoge']))
        let r = s:cache.get('foo')
        let e = {
              \ 'path': inside,
              \ 'worktree': worktree,
              \ 'repository': repository,
              \}
        Assert Equals(r, e)
        let r = s:cache.get('bar')
        let e = {
              \ 'path': worktree,
              \ 'worktree': worktree,
              \ 'repository': repository,
              \}
        Assert Equals(r, e)
        let r = s:cache.get('hoge')
        let e = {
              \ 'path': outside,
              \ 'worktree': '',
              \ 'repository': '',
              \}
        Assert Equals(r, e)
      End
    End
  End
End

