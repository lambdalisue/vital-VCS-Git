let s:V = vital#of('vital')
call s:V.unload() " make sure that the following modules are not cached version
let s:R = s:V.import('VCS.Git.StatusParser')


Describe VCS.Git.StatusParser

  Context .parse_record({line})
    It should be able to parse 'M  foo/bar/hoge.vim'
      let record = 'M  foo/bar/hoge.vim'
      let result = s:R.parse_record(record)
      let expected = {
            \ 'index': 'M',
            \ 'worktree': ' ',
            \ 'path': 'foo/bar/hoge.vim',
            \ 'record': record,
            \ 'sign': 'M ',
            \ 'is_conflicted': 0,
            \ 'is_staged': 1,
            \ 'is_unstaged': 0,
            \ 'is_untracked': 0,
            \ 'is_ignored': 0,
            \}
      Assert Equals(result, expected)
    End
    It should be able to parse ' M foo/bar/hoge.vim'
      let record = ' M foo/bar/hoge.vim'
      let result = s:R.parse_record(record)
      let expected = {
            \ 'index': ' ',
            \ 'worktree': 'M',
            \ 'path': 'foo/bar/hoge.vim',
            \ 'record': record,
            \ 'sign': ' M',
            \ 'is_conflicted': 0,
            \ 'is_staged': 0,
            \ 'is_unstaged': 1,
            \ 'is_untracked': 0,
            \ 'is_ignored': 0,
            \}
      Assert Equals(result, expected)
    End
    It should be able to parse 'UU foo/bar/hoge.vim'
      let record = 'UU foo/bar/hoge.vim'
      let result = s:R.parse_record(record)
      let expected = {
            \ 'index': 'U',
            \ 'worktree': 'U',
            \ 'path': 'foo/bar/hoge.vim',
            \ 'record': record,
            \ 'sign': 'UU',
            \ 'is_conflicted': 1,
            \ 'is_staged': 0,
            \ 'is_unstaged': 0,
            \ 'is_untracked': 0,
            \ 'is_ignored': 0,
            \}
      Assert Equals(result, expected)
    End
    It should be able to parse 'UU "f o o/bar/hoge.vim"'
      let record = 'UU "f o o/bar/hoge.vim"'
      let result = s:R.parse_record(record)
      let expected = {
            \ 'index': 'U',
            \ 'worktree': 'U',
            \ 'path': 'f o o/bar/hoge.vim',
            \ 'record': record,
            \ 'sign': 'UU',
            \ 'is_conflicted': 1,
            \ 'is_staged': 0,
            \ 'is_unstaged': 0,
            \ 'is_untracked': 0,
            \ 'is_ignored': 0,
            \}
      Assert Equals(result, expected)
    End
    It should be able to parse 'UU test file'
      let record = 'UU test file'
      let result = s:R.parse_record(record)
      let expected = {
            \ 'index': 'U',
            \ 'worktree': 'U',
            \ 'path': 'test file',
            \ 'record': record,
            \ 'sign': 'UU',
            \ 'is_conflicted': 1,
            \ 'is_staged': 0,
            \ 'is_unstaged': 0,
            \ 'is_untracked': 0,
            \ 'is_ignored': 0,
            \}
      Assert Equals(result, expected)
    End
    It should be able to parse 'R  foo/bar/hoge.vim -> foo/bar/piyo.vim'
      let record = 'R  foo/bar/hoge.vim -> foo/bar/piyo.vim'
      let result = s:R.parse_record(record)
      let expected = {
            \ 'index': 'R',
            \ 'worktree': ' ',
            \ 'path': 'foo/bar/hoge.vim',
            \ 'path2': 'foo/bar/piyo.vim',
            \ 'record': record,
            \ 'sign': 'R ',
            \ 'is_conflicted': 0,
            \ 'is_staged': 1,
            \ 'is_unstaged': 0,
            \ 'is_untracked': 0,
            \ 'is_ignored': 0,
            \}
      Assert Equals(result, expected)
    End
    It should be able to parse 'R  "f o o/bar/hoge.vim" -> "f o o/bar/piyo.vim"'
      let record = 'R  "f o o/bar/hoge.vim" -> "f o o/bar/piyo.vim"'
      let result = s:R.parse_record(record)
      let expected = {
            \ 'index': 'R',
            \ 'worktree': ' ',
            \ 'path': 'f o o/bar/hoge.vim',
            \ 'path2': 'f o o/bar/piyo.vim',
            \ 'record': record,
            \ 'sign': 'R ',
            \ 'is_conflicted': 0,
            \ 'is_staged': 1,
            \ 'is_unstaged': 0,
            \ 'is_untracked': 0,
            \ 'is_ignored': 0,
            \}
      Assert Equals(result, expected)
    End
  End

  Context .parse({status})
    It should parse formatted status text ('git status --porcelain')
      let status = join([
            \ ' M foo/bar/hoge1.vim',
            \ 'M  foo/bar/hoge2.vim',
            \ 'UU foo/bar/hoge3.vim',
            \ 'RM foo/bar/hoge4.vim -> foo/bar/hoge5.vim',
            \], "\n")
      let result = s:R.parse(status)
      let expected = {
            \ 'all': [
            \   {
            \     'index': ' ',
            \     'worktree': 'M',
            \     'path': 'foo/bar/hoge1.vim',
            \     'record': ' M foo/bar/hoge1.vim',
            \     'sign': ' M',
            \     'is_conflicted': 0,
            \     'is_staged': 0,
            \     'is_unstaged': 1,
            \     'is_untracked': 0,
            \     'is_ignored': 0,
            \   },
            \   {
            \     'index': 'M',
            \     'worktree': ' ',
            \     'path': 'foo/bar/hoge2.vim',
            \     'record': 'M  foo/bar/hoge2.vim',
            \     'sign': 'M ',
            \     'is_conflicted': 0,
            \     'is_staged': 1,
            \     'is_unstaged': 0,
            \     'is_untracked': 0,
            \     'is_ignored': 0,
            \   },
            \   {
            \     'index': 'U',
            \     'worktree': 'U',
            \     'path': 'foo/bar/hoge3.vim',
            \     'record': 'UU foo/bar/hoge3.vim',
            \     'sign': 'UU',
            \     'is_conflicted': 1,
            \     'is_staged': 0,
            \     'is_unstaged': 0,
            \     'is_untracked': 0,
            \     'is_ignored': 0,
            \   },
            \   {
            \     'index': 'R',
            \     'worktree': 'M',
            \     'path': 'foo/bar/hoge4.vim',
            \     'path2': 'foo/bar/hoge5.vim',
            \     'record': 'RM foo/bar/hoge4.vim -> foo/bar/hoge5.vim',
            \     'sign': 'RM',
            \     'is_conflicted': 0,
            \     'is_staged': 1,
            \     'is_unstaged': 1,
            \     'is_untracked': 0,
            \     'is_ignored': 0,
            \   },
            \ ],
            \ 'conflicted': [
            \   {
            \     'index': 'U',
            \     'worktree': 'U',
            \     'path': 'foo/bar/hoge3.vim',
            \     'record': 'UU foo/bar/hoge3.vim',
            \     'sign': 'UU',
            \     'is_conflicted': 1,
            \     'is_staged': 0,
            \     'is_unstaged': 0,
            \     'is_untracked': 0,
            \     'is_ignored': 0,
            \   },
            \ ],
            \ 'staged': [
            \   {
            \     'index': 'M',
            \     'worktree': ' ',
            \     'path': 'foo/bar/hoge2.vim',
            \     'record': 'M  foo/bar/hoge2.vim',
            \     'sign': 'M ',
            \     'is_conflicted': 0,
            \     'is_staged': 1,
            \     'is_unstaged': 0,
            \     'is_untracked': 0,
            \     'is_ignored': 0,
            \   },
            \   {
            \     'index': 'R',
            \     'worktree': 'M',
            \     'path': 'foo/bar/hoge4.vim',
            \     'path2': 'foo/bar/hoge5.vim',
            \     'record': 'RM foo/bar/hoge4.vim -> foo/bar/hoge5.vim',
            \     'sign': 'RM',
            \     'is_conflicted': 0,
            \     'is_staged': 1,
            \     'is_unstaged': 1,
            \     'is_untracked': 0,
            \     'is_ignored': 0,
            \   },
            \ ],
            \ 'unstaged': [
            \   {
            \     'index': ' ',
            \     'worktree': 'M',
            \     'path': 'foo/bar/hoge1.vim',
            \     'record': ' M foo/bar/hoge1.vim',
            \     'sign': ' M',
            \     'is_conflicted': 0,
            \     'is_staged': 0,
            \     'is_unstaged': 1,
            \     'is_untracked': 0,
            \     'is_ignored': 0,
            \   },
            \   {
            \     'index': 'R',
            \     'worktree': 'M',
            \     'path': 'foo/bar/hoge4.vim',
            \     'path2': 'foo/bar/hoge5.vim',
            \     'record': 'RM foo/bar/hoge4.vim -> foo/bar/hoge5.vim',
            \     'sign': 'RM',
            \     'is_conflicted': 0,
            \     'is_staged': 1,
            \     'is_unstaged': 1,
            \     'is_untracked': 0,
            \     'is_ignored': 0,
            \   },
            \ ],
            \ 'untracked': [],
            \ 'ignored': [],
            \}
      Assert Equals(result, expected)
    End
  End


  let conflicted_signs = ['DD', 'AU', 'UD', 'UA', 'DU', 'AA', 'UU']
  let staged_signs = [
        \ 'M ', 'A ', 'D ', 'R ', 'C ',
        \]
  let unstaged_signs = [
        \ ' M', ' D',
        \]
  let both_signs = [
        \ 'MM', 'MD',
        \ 'AM', 'AD',
        \ 'DM',
        \ 'RM', 'RD',
        \ 'CM', 'CD',
        \]
  let untracked_signs = ['??']
  let ignored_signs = ['!!']

  Context .is_conflicted({sign})
    It should return 1 for 'DD', 'AU', 'UD', 'UA', 'DU', 'AA', 'UU'
      for sign in conflicted_signs
        let result = s:R.is_conflicted(sign)
        Assert Equals(result, 1)
      endfor
    End

    It should return 0 for 'M ', 'A ', 'D ', 'R ', 'C '
      for sign in staged_signs
        let result = s:R.is_conflicted(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for ' M', ' D'
      for sign in unstaged_signs
        let result = s:R.is_conflicted(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for 'MM', 'MD', 'AM', 'AD', 'DM', etc.
      for sign in both_signs
        let result = s:R.is_conflicted(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for '??'
      for sign in untracked_signs
        let result = s:R.is_conflicted(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for '!!'
      for sign in ignored_signs
        let result = s:R.is_conflicted(sign)
        Assert Equals(result, 0)
      endfor
    End
  End

  Context .is_staged({sign})
    It should return 0 for 'DD', 'AU', 'UD', 'UA', 'DU', 'AA', 'UU'
      for sign in conflicted_signs
        let result = s:R.is_staged(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 1 for 'M ', 'A ', 'D ', 'R ', 'C '
      for sign in staged_signs
        let result = s:R.is_staged(sign)
        Assert Equals(result, 1)
      endfor
    End

    It should return 0 for ' M', ' D'
      for sign in unstaged_signs
        let result = s:R.is_staged(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 1 for 'MM', 'MD', 'AM', 'AD', 'DM', etc.
      for sign in both_signs
        let result = s:R.is_staged(sign)
        Assert Equals(result, 1)
      endfor
    End


    It should return 0 for '??'
      for sign in untracked_signs
        let result = s:R.is_staged(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for '!!'
      for sign in ignored_signs
        let result = s:R.is_staged(sign)
        Assert Equals(result, 0)
      endfor
    End
  End

  Context .is_unstaged({sign})
    It should return 0 for 'DD', 'AU', 'UD', 'UA', 'DU', 'AA', 'UU'
      for sign in conflicted_signs
        let result = s:R.is_unstaged(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for 'M ', 'A ', 'D ', 'R ', 'C '
      for sign in staged_signs
        let result = s:R.is_unstaged(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 1 for ' M', ' D'
      for sign in unstaged_signs
        let result = s:R.is_unstaged(sign)
        Assert Equals(result, 1)
      endfor
    End

    It should return 1 for 'MM', 'MD', 'AM', 'AD', 'DM', etc.
      for sign in both_signs
        let result = s:R.is_unstaged(sign)
        Assert Equals(result, 1)
      endfor
    End


    It should return 0 for '??'
      for sign in untracked_signs
        let result = s:R.is_unstaged(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for '!!'
      for sign in ignored_signs
        let result = s:R.is_unstaged(sign)
        Assert Equals(result, 0)
      endfor
    End
  End

  Context .is_untracked({sign})
    It should return 0 for 'DD', 'AU', 'UD', 'UA', 'DU', 'AA', 'UU'
      for sign in conflicted_signs
        let result = s:R.is_untracked(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for 'M ', 'A ', 'D ', 'R ', 'C '
      for sign in staged_signs
        let result = s:R.is_untracked(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for ' M', ' D'
      for sign in unstaged_signs
        let result = s:R.is_untracked(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for 'MM', 'MD', 'AM', 'AD', 'DM', etc.
      for sign in both_signs
        let result = s:R.is_untracked(sign)
        Assert Equals(result, 0)
      endfor
    End


    It should return 1 for '??'
      for sign in untracked_signs
        let result = s:R.is_untracked(sign)
        Assert Equals(result, 1)
      endfor
    End

    It should return 0 for '!!'
      for sign in ignored_signs
        let result = s:R.is_untracked(sign)
        Assert Equals(result, 0)
      endfor
    End
  End

  Context .is_ignored({sign})
    It should return 0 for 'DD', 'AU', 'UD', 'UA', 'DU', 'AA', 'UU'
      for sign in conflicted_signs
        let result = s:R.is_ignored(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for 'M ', 'A ', 'D ', 'R ', 'C '
      for sign in staged_signs
        let result = s:R.is_ignored(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for ' M', ' D'
      for sign in unstaged_signs
        let result = s:R.is_ignored(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 0 for 'MM', 'MD', 'AM', 'AD', 'DM', etc.
      for sign in both_signs
        let result = s:R.is_ignored(sign)
        Assert Equals(result, 0)
      endfor
    End


    It should return 0 for '??'
      for sign in untracked_signs
        let result = s:R.is_ignored(sign)
        Assert Equals(result, 0)
      endfor
    End

    It should return 1 for '!!'
      for sign in ignored_signs
        let result = s:R.is_ignored(sign)
        Assert Equals(result, 1)
      endfor
    End
  End
End
