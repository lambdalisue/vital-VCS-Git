call vital#of('vital').unload()
let s:V = vital#of('vital')
let s:P = s:V.import('System.Filepath')
let s:C = s:V.import('VCS.Git.Core')


Describe VCS.Git.Core
  Before all
    " Create a mock Git working tree
    let root = tempname()
    let worktree = s:P.join(root, 'inside')
    let repository = s:P.join(worktree, '.git')
    let inside = s:P.join(worktree, 'foo', 'bar')
    let outside = s:P.join(root, 'outside', 'foo', 'bar')
    lockvar root
    lockvar worktree
    lockvar repository
    lockvar inside
    lockvar outside
    call mkdir(repository, 'p')
    call mkdir(inside, 'p')
    call mkdir(outside, 'p')
  End

  After all
    " remote a temp directory
    call s:V.import('System.File').rmdir(root, 'r')
  End

  Context .get_config()
    It should return a config dictionary
      let config = s:C.get_config()
      Assert IsDict(config)
      Assert Equals(config, {
            \ 'executable': 'git',
            \ 'arguments': ['-c', 'color.ui=false'],
            \})
    End
  End

  Context .set_config({config})
    It should extend a config dictionary
      call s:C.set_config({'foo': 'bar'})
      let config = s:C.get_config()
      Assert IsDict(config)
      Assert HasKey(config, 'foo')
      Assert Equals(config.foo, 'bar')
    End
  End

  Context .find_worktree({path})
    It should return a top directory path of the working directory
      let path = inside
      let exp = worktree
      let ret = s:C.find_worktree(path)
      Assert Equals(ret, exp)
    End
    It should return an empty string for a non git working directory
      let path = outside
      let exp = ''
      let ret = s:C.find_worktree(path)
      Assert Equals(ret, exp)
    End
  End

  Context .find_repository({worktree})
    It should return a '.git' directory path of the working directory
      let path = worktree
      let exp = repository
      let ret = s:C.find_repository(path)
      Assert Equals(ret, exp)
    End

    It should return an empty string for a non git working directory
      let path = outside
      let exp = ''
      let ret = s:C.find_repository(path)
      Assert Equals(ret, exp)
    End
  End

  Context .get_relative_path(worktree, path)
    It should return a relative path from {worktree} of an absolute {path}
      let path = inside
      let exp = s:P.join(['foo', 'bar'])
      let ret = s:C.get_relative_path(worktree, path)
      Assert Equals(ret, exp)
    End

    It should return a {path} if {path} is not absolute path
      let path = s:P.join(['foo', 'bar'])
      let exp = path
      let ret = s:C.get_relative_path(worktree, path)
      Assert Equals(ret, exp)
    End
  End

  Context .get_absolute_path(worktree, path)
    It should return an absolute path of a relative {path} from {worktree}
      let path = s:P.join(['foo', 'bar'])
      let exp = inside
      let ret = s:C.get_absolute_path(worktree, path)
      Assert Equals(ret, exp)
    End

    It should return a {path} if {path} is not relative path
      let path = outside
      let exp = path
      let ret = s:C.get_absolute_path(worktree, path)
      Assert Equals(ret, exp)
    End
  End

  Context .get_index_updated_time(repository)
    Before
      let filename = s:P.join(repository, 'index')
      call writefile([], filename)
    End
    After
      call delete(filename)
    End
    It should return a number which indicate the updated time of repository index
      let ret = s:C.get_index_updated_time(repository)
      Assert Equals(ret, getftime(filename))
    End
  End

  Context .get_head({repository})
    It should return an empty string if HEAD is missing
      let ret = s:C.get_head(repository)
      Assert Equals(ret, '')
    End

    It should return a string of HEAD content
      let filename = s:P.join(repository, 'HEAD')
      call writefile(['foo'], filename)
      let ret = s:C.get_head(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_fetch_head({repository})
    It should return an empty string if FETCH_HEAD is missing
      let ret = s:C.get_fetch_head(repository)
      Assert Equals(ret, '')
    End

    It should return a string of FETCH_HEAD content
      let filename = s:P.join(repository, 'FETCH_HEAD')
      call writefile(['foo'], filename)
      let ret = s:C.get_fetch_head(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_orig_head({repository})
    It should return an empty string if ORIG_HEAD is missing
      let ret = s:C.get_orig_head(repository)
      Assert Equals(ret, '')
    End

    It should return a string of ORIG_HEAD content
      let filename = s:P.join(repository, 'ORIG_HEAD')
      call writefile(['foo'], filename)
      let ret = s:C.get_orig_head(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_merge_head({repository})
    It should return an empty string if MERGE_HEAD is missing
      let ret = s:C.get_merge_head(repository)
      Assert Equals(ret, '')
    End

    It should return a string of MERGE_HEAD content
      let filename = s:P.join(repository, 'MERGE_HEAD')
      call writefile(['foo'], filename)
      let ret = s:C.get_merge_head(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_merge_mode({repository})
    It should return an empty string if MERGE_MODE is missing
      let ret = s:C.get_merge_mode(repository)
      Assert Equals(ret, '')
    End

    It should return a string of MERGE_MODE content
      let filename = s:P.join(repository, 'MERGE_MODE')
      call writefile(['foo'], filename)
      let ret = s:C.get_merge_mode(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_commit_editmsg({repository})
    It should return an empty list if COMMIT_EDITMSG is missing
      let ret = s:C.get_commit_editmsg(repository)
      Assert Equals(ret, [])
    End

    It should return a list of COMMIT_EDITMSG content
      let filename = s:P.join(repository, 'COMMIT_EDITMSG')
      call writefile(['foo'], filename)
      let ret = s:C.get_commit_editmsg(repository)
      Assert Equals(ret, ['foo'])
      call delete(filename)
    End
  End

  Context .get_merge_msg({repository})
    It should return an empty list if MERGE_MSG is missing
      let ret = s:C.get_merge_msg(repository)
      Assert Equals(ret, [])
    End

    It should return a list of MERGE_MSG content
      let filename = s:P.join(repository, 'MERGE_MSG')
      call writefile(['foo'], filename)
      let ret = s:C.get_merge_msg(repository)
      Assert Equals(ret, ['foo'])
      call delete(filename)
    End
  End

  Context .get_hash_reference({repository}, {branch})
    It should return an empty list if refs/heads/{branch} is missing
      let ret = s:C.get_hash_reference(repository, 'invalid_branch')
      Assert Equals(ret, '')
    End

    It should return a hash reference of a specified branch
      let filename = s:P.join(repository, 'refs', 'heads', 'existing')
      call mkdir(fnamemodify(filename, ':h'), 'p')
      call writefile(['hash reference'], filename)
      let ret = s:C.get_hash_reference(repository, 'existing')
      Assert Equals(ret, 'hash reference')
      call delete(filename)
    End
  End


  Context .get_repository_config({repository})
    It should return a parsed config dictionary
      let filename = s:P.join(repository, 'config')
      call writefile(['[core]', '  bare = false'], filename)
      let ret = s:C.get_repository_config(repository)
      Assert HasKey(ret, 'core')
      call delete(filename)
    End

    It should return an empty dictionary for a non git repository
      let path = outside
      let ret = s:C.get_repository_config(path)
      Assert Equals(ret, {})
    End
  End

  Context .get_branch_remote({config}, {local_branch})
    It should return a name of remote which the branch connected
      let config = { 'branch "master"': { 'remote': 'origin' } }
      let ret = s:C.get_branch_remote(config, 'master')
      Assert Equals(ret, 'origin')
    End

    It should return an empty string for invalid branch
      let config = { 'branch "master"': { 'remote': 'origin' } }
      let ret = s:C.get_branch_remote(config, 'invalid')
      Assert Equals(ret, '')
    End
  End

  Context .get_branch_merge({config}, {local_branch})
    It should return a value of merge which the branch connected
      let config = { 'branch "master"': { 'merge': 'refs/heads/origin' } }
      let ret = s:C.get_branch_merge(config, 'master')
      Assert Equals(ret, 'refs/heads/origin')
    End

    It should return a truncated value of merge which the branch connected
      let config = { 'branch "master"': { 'merge': 'refs/heads/origin' } }
      let ret = s:C.get_branch_merge(config, 'master', 1)
      Assert Equals(ret, 'origin')
    End

    It should return an empty string for invalid branch
      let config = { 'branch "master"': { 'merge': 'refs/heads/origin' } }
      let ret = s:C.get_branch_merge(config, 'invalid')
      Assert Equals(ret, '')
    End
  End

  Context .get_remote_url({config}, {remote})
    It should return a url of the specified remote
      let config = { 'remote "origin"': { 'url': 'foo/bar' } }
      let ret = s:C.get_remote_url(config, 'origin')
      Assert Equals(ret, 'foo/bar')
    End

    It should return an empty string for invalid branch
      let config = { 'remote "origin"': { 'url': 'foo/bar' } }
      let ret = s:C.get_remote_url(config, 'invalid')
      Assert Equals(ret, '')
    End
  End

  Context .get_comment_char({config})
    It should return a comment character
      let config = { 'core': { 'commentchar': '%' } }
      let ret = s:C.get_comment_char(config)
      Assert Equals(ret, '%')
    End

    It should return a default comment character (#) if no commenctChar is specified
      let config = { 'core': {} }
      let ret = s:C.get_comment_char(config)
      Assert Equals(ret, '#')

      let config = {}
      let ret = s:C.get_comment_char(config)
      Assert Equals(ret, '#')
    End

    It should return a specified default comment character if no commenctChar is specified
      let config = { 'core': {} }
      let ret = s:C.get_comment_char(config, '&')
      Assert Equals(ret, '&')

      let config = {}
      let ret = s:C.get_comment_char(config, '&')
      Assert Equals(ret, '&')
    End
  End

  Context .system({args} [, {opts}]})
    Before
      let previous_cwd = getcwd()
      silent execute 'lcd ' inside
    End

    After
      silent execute 'lcd ' previous_cwd
    End

    It should execute system command
      let result = s:C.system(['echo', '-n', 'hello'])
      Assert Equals(result.status, 0)
      Assert Equals(result.stdout, 'hello')
      Assert Equals(result.args, ['echo', '-n', 'hello'])
      Assert Equals(result.opts, {'stdin': '', 'timeout': 0, 'cwd': ''})
    End

    It should execute system command with nested {args}
      let result = s:C.system(['echo', ['-n', ['hello']]])
      Assert Equals(result.status, 0)
      Assert Equals(result.stdout, 'hello')
      Assert Equals(result.args, ['echo', '-n', 'hello'])
      Assert Equals(result.opts, {'stdin': '', 'timeout': 0, 'cwd': ''})
    End

    It should execute system command on a specified working directory
      let cwd = outside
      " 'pwd' command does not include the last separator thus remove it
      " for comparison
      let cwd = s:P.remove_last_separator(cwd)
      let sep = s:P.separator()

      " FIXME Windows does not have 'pwd'
      let result = s:C.system(['pwd'], { 'cwd': cwd })
      Assert Equals(result.status, 0)
      Assert Equals(result.stdout, resolve(cwd))
      Assert Equals(result.args, ['pwd'])
      Assert Equals(result.opts, {'stdin': '', 'timeout': 0, 'cwd': cwd})
      Assert Equals(fnamemodify(getcwd(), ':p'), resolve(inside) . sep)
    End
  End

  Context .exec({args} [, {opts}])
    Before
      let previous_cwd = getcwd()
      silent execute printf('!git init -q %s', worktree)
      silent execute 'lcd ' inside
    End

    After
      silent execute 'lcd ' previous_cwd
    End

    It should execute git command and return a dictionary
      let result = s:C.exec(['rev-parse', '--show-toplevel'])
      let expect = {
            \ 'status': 0,
            \ 'stdout': resolve(worktree),
            \ 'args': ['git', '-c', 'color.ui=false', 'rev-parse', '--show-toplevel'],
            \ 'opts': {'stdin': '', 'timeout': 0, 'cwd': ''},
            \}
      Assert Equals(result, expect)
    End

    It should execute git command on a specified directory
      silent execute 'lcd ' outside

      let opts = { 'cwd': worktree }
      let result = s:C.exec(['rev-parse', '--show-toplevel'], opts)
      let expect = {
            \ 'status': 0,
            \ 'stdout': resolve(worktree),
            \ 'args': ['git', '-c', 'color.ui=false', 'rev-parse', '--show-toplevel'],
            \ 'opts': {'stdin': '', 'timeout': 0, 'cwd': worktree},
            \}
      Assert Equals(result, expect)
    End

    It should execute git command on a parent directory of a specified file
      silent execute 'lcd ' outside

      let cwd = s:P.join([inside, 'piyo.txt'])
      let opts = { 'cwd': cwd }
      let result = s:C.exec(['rev-parse', '--show-prefix'], opts)
      let expect = {
            \ 'status': 0,
            \ 'stdout': s:P.join('foo', 'bar') . s:P.separator(),
            \ 'args': ['git', '-c', 'color.ui=false', 'rev-parse', '--show-prefix'],
            \ 'opts': {'stdin': '', 'timeout': 0, 'cwd': cwd},
            \}
      Assert Equals(result, expect)
    End
  End
End
