call vital#of('vital').unload()
let s:V = vital#of('vital')
let s:P = s:V.import('System.Filepath')
let s:F = s:V.import('System.File')
let s:C = s:V.import('VCS.Git.Core')


Describe VCS.Git.Core
  Before all
    " Create a mock Git working tree
    let root = tempname()
    let worktree = s:P.join(root, 'inside')
    let repository = s:P.join(worktree, '.git')
    let inside = s:P.join(worktree, 'foo', 'bar')
    let outside = s:P.join(root, 'outside', 'foo', 'bar')
    lockvar root
    lockvar worktree
    lockvar repository
    lockvar inside
    lockvar outside
    call mkdir(repository, 'p')
    call mkdir(inside, 'p')
    call mkdir(outside, 'p')
  End

  After all
    " remote a temp directory
    call s:V.import('System.File').rmdir(root, 'r')
  End

  Context .get_config()
    It should return a config dictionary
      let config = s:C.get_config()
      Assert IsDict(config)
      Assert Equals(config, {
            \ 'executable': 'git',
            \ 'arguments': ['-c', 'color.ui=false', '--no-pager'],
            \})
    End
  End

  Context .set_config({config})
    It should extend a config dictionary
      call s:C.set_config({'foo': 'bar'})
      let config = s:C.get_config()
      Assert IsDict(config)
      Assert HasKey(config, 'foo')
      Assert Equals(config.foo, 'bar')
    End
  End

  Context .find_worktree({path})
    It should return a top directory path of the working directory
      let path = inside
      let exp = worktree
      let ret = s:C.find_worktree(path)
      Assert Equals(ret, exp)
    End
    It should return an empty string for a non git working directory
      let path = outside
      let exp = ''
      let ret = s:C.find_worktree(path)
      Assert Equals(ret, exp)
    End
  End

  Context .find_repository({worktree})
    It should return a '.git' directory path of the working directory
      let path = worktree
      let exp = repository
      let ret = s:C.find_repository(path)
      Assert Equals(ret, exp)
    End

    It should return an empty string for a non git working directory
      let path = outside
      let exp = ''
      let ret = s:C.find_repository(path)
      Assert Equals(ret, exp)
    End
  End

  Context .get_relative_path(worktree, path)
    It should return a relative path from {worktree} of an absolute {path}
      let path = inside
      let exp = s:P.join(['foo', 'bar'])
      let ret = s:C.get_relative_path(worktree, path)
      Assert Equals(ret, exp)
    End

    It should throw an exception if {path} is not absolute path
      let path = s:P.join(['foo', 'bar'])
      let C = s:C
      Throw C.get_relative_path(worktree, path) /vital: VCS\.Git\.Core: ".*" is already/
    End
  End

  Context .get_absolute_path(worktree, path)
    It should return an absolute path of a relative {path} from {worktree}
      let path = s:P.join(['foo', 'bar'])
      let exp = inside
      let ret = s:C.get_absolute_path(worktree, path)
      Assert Equals(ret, exp)
    End

    It should return a {path} if {path} is not relative path
      let path = outside
      Throw C.get_absolute_path(worktree, path) /vital: VCS\.Git\.Core: ".*" is already/
    End
  End

  Context .get_head({repository})
    It should return an empty string if HEAD is missing
      let ret = s:C.get_head(repository)
      Assert Equals(ret, '')
    End

    It should return a string of HEAD content
      let filename = s:P.join(repository, 'HEAD')
      call writefile(['foo'], filename)
      let ret = s:C.get_head(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_fetch_head({repository})
    It should return an empty string if FETCH_HEAD is missing
      let ret = s:C.get_fetch_head(repository)
      Assert Equals(ret, [])
    End

    It should return a string of FETCH_HEAD content
      let filename = s:P.join(repository, 'FETCH_HEAD')
      call writefile(['foo', 'bar'], filename)
      let ret = s:C.get_fetch_head(repository)
      Assert Equals(ret, ['foo', 'bar'])
      call delete(filename)
    End
  End

  Context .get_orig_head({repository})
    It should return an empty string if ORIG_HEAD is missing
      let ret = s:C.get_orig_head(repository)
      Assert Equals(ret, '')
    End

    It should return a string of ORIG_HEAD content
      let filename = s:P.join(repository, 'ORIG_HEAD')
      call writefile(['foo'], filename)
      let ret = s:C.get_orig_head(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_merge_head({repository})
    It should return an empty string if MERGE_HEAD is missing
      let ret = s:C.get_merge_head(repository)
      Assert Equals(ret, '')
    End

    It should return a string of MERGE_HEAD content
      let filename = s:P.join(repository, 'MERGE_HEAD')
      call writefile(['foo'], filename)
      let ret = s:C.get_merge_head(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End

  End

  Context .get_rebase_merge_head({repository})
    Before
      let dirname = s:P.join(repository, 'rebase-merge')
      let filename = s:P.join(dirname, 'head-name')
      call mkdir(dirname, 'p')
    End

    After
      call s:F.rmdir(dirname)
    End

    It should return an empty string if rebase-merge/head-name is missing
      let ret = s:C.get_rebase_merge_head(repository)
      Assert Equals(ret, '')
    End

    It should return a string of the file content
      call writefile(['foo'], filename)
      let ret = s:C.get_rebase_merge_head(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_rebase_merge_step({repository})
    Before
      let dirname = s:P.join(repository, 'rebase-merge')
      let filename = s:P.join(dirname, 'msgnum')
      call mkdir(dirname, 'p')
    End
    After
      call s:F.rmdir(dirname)
    End

    It should return an empty string if rebase-merge/msgnum is missing
      let ret = s:C.get_rebase_merge_step(repository)
      Assert Equals(ret, '')
    End

    It should return a string of the file content
      call writefile(['foo'], filename)
      let ret = s:C.get_rebase_merge_step(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_rebase_merge_total({repository})
    Before
      let dirname = s:P.join(repository, 'rebase-merge')
      let filename = s:P.join(dirname, 'end')
      call mkdir(dirname, 'p')
    End
    After
      call s:F.rmdir(dirname)
    End

    It should return an empty string if rebase-merge/end is missing
      let ret = s:C.get_rebase_merge_total(repository)
      Assert Equals(ret, '')
    End

    It should return a string of the file content
      call writefile(['foo'], filename)
      let ret = s:C.get_rebase_merge_total(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_rebase_apply_head({repository})
    Before
      let dirname = s:P.join(repository, 'rebase-apply')
      let filename = s:P.join(dirname, 'head-name')
      call mkdir(dirname, 'p')
    End
    After
      call s:F.rmdir(dirname)
    End

    It should return an empty string if rebase-apply/head-name is missing
      let ret = s:C.get_rebase_apply_head(repository)
      Assert Equals(ret, '')
    End

    It should return a string of the file content
      call writefile(['foo'], filename)
      let ret = s:C.get_rebase_apply_head(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_rebase_apply_step({repository})
    Before
      let dirname = s:P.join(repository, 'rebase-apply')
      let filename = s:P.join(dirname, 'next')
      call mkdir(dirname, 'p')
    End
    After
      call s:F.rmdir(dirname)
    End

    It should return an empty string if rebase-apply/next is missing
      let ret = s:C.get_rebase_apply_step(repository)
      Assert Equals(ret, '')
    End

    It should return a string of the file content
      call writefile(['foo'], filename)
      let ret = s:C.get_rebase_apply_step(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_rebase_apply_total({repository})
    Before
      let dirname = s:P.join(repository, 'rebase-apply')
      let filename = s:P.join(dirname, 'last')
      call mkdir(dirname, 'p')
    End
    After
      call s:F.rmdir(dirname)
    End

    It should return an empty string if rebase-apply/last is missing
      let ret = s:C.get_rebase_apply_total(repository)
      Assert Equals(ret, '')
    End

    It should return a string of the file content
      call writefile(['foo'], filename)
      let ret = s:C.get_rebase_apply_total(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_cherry_pick_head({repository})
    It should return an empty string if CHERRY_PICK_HEAD is missing
      let ret = s:C.get_cherry_pick_head(repository)
      Assert Equals(ret, '')
    End

    It should return a string of CHERRY_PICK_HEAD content
      let filename = s:P.join(repository, 'CHERRY_PICK_HEAD')
      call writefile(['foo'], filename)
      let ret = s:C.get_cherry_pick_head(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_revert_head({repository})
    It should return an empty string if REVERT_HEAD is missing
      let ret = s:C.get_revert_head(repository)
      Assert Equals(ret, '')
    End

    It should return a string of REVERT_HEAD content
      let filename = s:P.join(repository, 'REVERT_HEAD')
      call writefile(['foo'], filename)
      let ret = s:C.get_revert_head(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .get_bisect_log({repository})
    It should return an empty string if BISECT_LOG is missing
      let ret = s:C.get_bisect_log(repository)
      Assert Equals(ret, '')
    End

    It should return a string of BISECT_LOG content
      let filename = s:P.join(repository, 'BISECT_LOG')
      call writefile(['foo'], filename)
      let ret = s:C.get_bisect_log(repository)
      Assert Equals(ret, 'foo')
      call delete(filename)
    End
  End

  Context .is_rebase_merging({repository})
    Before
      let dirname = s:P.join(repository, 'rebase-merge')
    End

    It should return 0 if rebase-merge is missing
      let ret = s:C.is_rebase_merging(repository)
      Assert Equals(ret, 0)
    End

    It should return 1 otherwise
      call mkdir(dirname, 'p')
      let ret = s:C.is_rebase_merging(repository)
      Assert Equals(ret, 1)
      call s:F.rmdir(dirname)
    End
  End

  Context .is_rebase_merging_interactive({repository})
    Before
      let dirname = s:P.join(repository, 'rebase-merge')
      let filename = s:P.join(dirname, 'interactive')
      call mkdir(dirname, 'p')
    End
    After
      call s:F.rmdir(dirname)
    End

    It should return 0 if rebase-merge/interactive is missing
      let ret = s:C.is_rebase_merging_interactive(repository)
      Assert Equals(ret, 0)
    End

    It should return 1 otherwise
      call writefile([], filename)
      let ret = s:C.is_rebase_merging_interactive(repository)
      Assert Equals(ret, 1)
      call delete(filename)
    End
  End

  Context .is_rebase_applying({repository})
    Before
      let dirname = s:P.join(repository, 'rebase-apply')
    End

    It should return 0 if rebase-apply is missing
      let ret = s:C.is_rebase_applying(repository)
      Assert Equals(ret, 0)
    End

    It should return 1 otherwise
      call mkdir(dirname, 'p')
      let ret = s:C.is_rebase_applying(repository)
      Assert Equals(ret, 1)
      call s:F.rmdir(dirname)
    End
  End

  Context .is_rebase_applying_rebase({repository})
    Before
      let dirname = s:P.join(repository, 'rebase-apply')
      let filename = s:P.join(dirname, 'rebasing')
      call mkdir(dirname, 'p')
    End
    After
      call s:F.rmdir(dirname)
    End

    It should return 0 if rebase-apply/rebasing is missing
      let ret = s:C.is_rebase_applying_rebase(repository)
      Assert Equals(ret, 0)
    End

    It should return 1 otherwise
      call writefile([], filename)
      let ret = s:C.is_rebase_applying_rebase(repository)
      Assert Equals(ret, 1)
      call delete(filename)
    End
  End

  Context .is_rebase_applying_am({repository})
    Before
      let dirname = s:P.join(repository, 'rebase-apply')
      let filename = s:P.join(dirname, 'applying')
      call mkdir(dirname, 'p')
    End
    After
      call s:F.rmdir(dirname)
    End

    It should return 0 if rebase-apply/applying is missing
      let ret = s:C.is_rebase_applying_am(repository)
      Assert Equals(ret, 0)
    End

    It should return 1 otherwise
      call writefile([], filename)
      let ret = s:C.is_rebase_applying_am(repository)
      Assert Equals(ret, 1)
      call delete(filename)
    End
  End

  Context .is_merging({repository})
    Before
      let filename = s:P.join(repository, 'MERGE_HEAD')
    End

    It should return 0 if MERGE_HEAD is missing
      let ret = s:C.is_merging(repository)
      Assert Equals(ret, 0)
    End

    It should return 1 otherwise
      call writefile([], filename)
      let ret = s:C.is_merging(repository)
      Assert Equals(ret, 1)
      call delete(filename)
    End
  End

  Context .is_cherry_picking({repository})
    Before
      let filename = s:P.join(repository, 'CHERRY_PICK_HEAD')
    End

    It should return 0 if CHERRY_PICK_HEAD is missing
      let ret = s:C.is_cherry_picking(repository)
      Assert Equals(ret, 0)
    End

    It should return 1 otherwise
      call writefile([], filename)
      let ret = s:C.is_cherry_picking(repository)
      Assert Equals(ret, 1)
      call delete(filename)
    End
  End

  Context .is_reverting({repository})
    Before
      let filename = s:P.join(repository, 'REVERT_HEAD')
    End

    It should return 0 if REVERT_HEAD is missing
      let ret = s:C.is_reverting(repository)
      Assert Equals(ret, 0)
    End

    It should return 1 otherwise
      call writefile([], filename)
      let ret = s:C.is_reverting(repository)
      Assert Equals(ret, 1)
      call delete(filename)
    End
  End

  Context .is_bisecting({repository})
    Before
      let filename = s:P.join(repository, 'BISECT_LOG')
    End

    It should return 0 if BISECT_LOG is missing
      let ret = s:C.is_bisecting(repository)
      Assert Equals(ret, 0)
    End

    It should return 1 otherwise
      call writefile([], filename)
      let ret = s:C.is_bisecting(repository)
      Assert Equals(ret, 1)
      call delete(filename)
    End
  End

  Context .get_mode({repository})
    It should return 'REBASE-i 0/5' during interactive rebasing
      call mkdir(s:P.join(repository, 'rebase-merge'))
      call writefile(['0'], s:P.join(repository, 'rebase-merge', 'msgnum'))
      call writefile(['5'], s:P.join(repository, 'rebase-merge', 'end'))
      call writefile([], s:P.join(repository, 'rebase-merge', 'interactive'))
      let ret = s:C.get_mode(repository)
      Assert Equals(ret, 'REBASE-i 0/5')
      call s:F.rmdir(s:P.join(repository, 'rebase-merge'), 'r')
    End

    It should return 'REBASE-m 0/5' during rebasing
      call mkdir(s:P.join(repository, 'rebase-merge'))
      call writefile(['0'], s:P.join(repository, 'rebase-merge', 'msgnum'))
      call writefile(['5'], s:P.join(repository, 'rebase-merge', 'end'))
      let ret = s:C.get_mode(repository)
      Assert Equals(ret, 'REBASE-m 0/5')
      call s:F.rmdir(s:P.join(repository, 'rebase-merge'), 'r')
    End

    It should return 'REBASE 0/5' during rebase applying
      call mkdir(s:P.join(repository, 'rebase-apply'))
      call writefile(['0'], s:P.join(repository, 'rebase-apply', 'next'))
      call writefile(['5'], s:P.join(repository, 'rebase-apply', 'last'))
      call writefile([], s:P.join(repository, 'rebase-apply', 'rebasing'))
      let ret = s:C.get_mode(repository)
      Assert Equals(ret, 'REBASE 0/5')
      call s:F.rmdir(s:P.join(repository, 'rebase-apply'), 'r')
    End

    It should return 'AM 0/5' during rebase applying via git am
      call mkdir(s:P.join(repository, 'rebase-apply'))
      call writefile(['0'], s:P.join(repository, 'rebase-apply', 'next'))
      call writefile(['5'], s:P.join(repository, 'rebase-apply', 'last'))
      call writefile([], s:P.join(repository, 'rebase-apply', 'applying'))
      let ret = s:C.get_mode(repository)
      Assert Equals(ret, 'AM 0/5')
      call s:F.rmdir(s:P.join(repository, 'rebase-apply'), 'r')
    End

    It should return 'AM/REBASE 0/5' during applying
      call mkdir(s:P.join(repository, 'rebase-apply'))
      call writefile(['0'], s:P.join(repository, 'rebase-apply', 'next'))
      call writefile(['5'], s:P.join(repository, 'rebase-apply', 'last'))
      let ret = s:C.get_mode(repository)
      Assert Equals(ret, 'AM/REBASE 0/5')
      call s:F.rmdir(s:P.join(repository, 'rebase-apply'), 'r')
    End

    It should return 'MERGING' during merging
      call writefile([], s:P.join(repository, 'MERGE_HEAD'))
      let ret = s:C.get_mode(repository)
      Assert Equals(ret, 'MERGING')
      call delete(s:P.join(repository, 'MERGE_HEAD'))
    End

    It should return 'CHERRY-PICKING' during cherry picking
      call writefile([], s:P.join(repository, 'CHERRY_PICK_HEAD'))
      let ret = s:C.get_mode(repository)
      Assert Equals(ret, 'CHERRY-PICKING')
      call delete(s:P.join(repository, 'CHERRY_PICK_HEAD'))
    End

    It should return 'REVERTING' during reverting
      call writefile([], s:P.join(repository, 'REVERT_HEAD'))
      let ret = s:C.get_mode(repository)
      Assert Equals(ret, 'REVERTING')
      call delete(s:P.join(repository, 'REVERT_HEAD'))
    End

    It should return 'BISECTING' during bisecting
      call writefile([], s:P.join(repository, 'BISECT_LOG'))
      let ret = s:C.get_mode(repository)
      Assert Equals(ret, 'BISECTING')
      call delete(s:P.join(repository, 'BISECT_LOG'))
    End

    It should return '' otherwise
      let ret = s:C.get_mode(repository)
      Assert Equals(ret, '')
    End
  End

  Context .get_commit_editmsg({repository})
    It should return an empty list if COMMIT_EDITMSG is missing
      let ret = s:C.get_commit_editmsg(repository)
      Assert Equals(ret, [])
    End

    It should return a list of COMMIT_EDITMSG content
      let filename = s:P.join(repository, 'COMMIT_EDITMSG')
      call writefile(['foo'], filename)
      let ret = s:C.get_commit_editmsg(repository)
      Assert Equals(ret, ['foo'])
      call delete(filename)
    End
  End

  Context .get_merge_msg({repository})
    It should return an empty list if MERGE_MSG is missing
      let ret = s:C.get_merge_msg(repository)
      Assert Equals(ret, [])
    End

    It should return a list of MERGE_MSG content
      let filename = s:P.join(repository, 'MERGE_MSG')
      call writefile(['foo'], filename)
      let ret = s:C.get_merge_msg(repository)
      Assert Equals(ret, ['foo'])
      call delete(filename)
    End
  End

  Context .get_local_hash({repository}, {branch})
    It should return an empty list if refs/heads/{branch} is missing
      let ret = s:C.get_local_hash(repository, 'invalid_branch')
      Assert Equals(ret, '')
    End

    It should return a hash reference of a specified branch
      let filename = s:P.join(repository, 'refs', 'heads', 'valid_branch')
      call mkdir(fnamemodify(filename, ':h'), 'p')
      call writefile(['hash reference'], filename)
      let ret = s:C.get_local_hash(repository, 'valid_branch')
      Assert Equals(ret, 'hash reference')
      call delete(filename)
    End

    It should return a hash reference of a specified branch if the branch is found in packed-ref
      let ref = s:P.join(repository, 'refs', 'heads', 'valid_branch')
      let filename = s:P.join(repository, 'packed-refs')
      call writefile([
            \ '# pack-refs with: peeled fully-peeled ',
            \ '7xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx refs/heads/master',
            \ '78052aba0f0839d05c4b8c8c93f304cb00cd51b5 refs/heads/valid_branch',
            \], filename)
      let ret = s:C.get_local_hash(repository, 'valid_branch')
      Assert Equals(ret, '78052aba0f0839d05c4b8c8c93f304cb00cd51b5')
      call delete(filename)
    End
  End

  Context .get_remote_hash({repository}, {remote}, {branch})
    It should return an empty list if refs/remotes/{remote}/{branch} is missing
      let ret = s:C.get_remote_hash(repository, 'invalid_remote', 'invalid_branch')
      Assert Equals(ret, '')
    End

    It should return a hash reference of a specified branch
      let filename = s:P.join(repository, 'refs', 'remotes', 'valid_remote', 'valid_branch')
      if !isdirectory(fnamemodify(filename, ':h'))
        call mkdir(fnamemodify(filename, ':h'), 'p')
      endif
      call writefile(['hash-reference'], filename)
      let ret = s:C.get_remote_hash(repository, 'valid_remote', 'valid_branch')
      Assert Equals(ret, 'hash-reference')
      call delete(filename)
    End

    It should return a hash reference of a specified branch from packed-refs
      let ref = s:P.join(repository, 'refs', 'remotes', 'origin', 'valid_branch')
      let filename = s:P.join(repository, 'packed-refs')
      call writefile([
            \ '# pack-refs with: peeled fully-peeled ',
            \ '7xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx refs/heads/master',
            \ '78052aba0f0839d05c4b8c8c93f304cb00cd51b5 refs/remotes/origin/valid_branch',
            \], filename)
      let ret = s:C.get_remote_hash(repository, 'origin', 'valid_branch')
      Assert Equals(ret, '78052aba0f0839d05c4b8c8c93f304cb00cd51b5')
      call delete(filename)
    End
  End

  Context .get_repository_config({repository})
    It should return a parsed config dictionary
      let filename = s:P.join(repository, 'config')
      call writefile(['[core]', '  bare = false'], filename)
      let ret = s:C.get_repository_config(repository)
      Assert HasKey(ret, 'core')
      call delete(filename)
    End

    It should return an empty dictionary for a non git repository
      let path = outside
      let ret = s:C.get_repository_config(path)
      Assert Equals(ret, {})
    End
  End

  Context .get_branch_remote({config}, {local_branch})
    It should return a name of remote which the branch connected
      let config = { 'branch "master"': { 'remote': 'origin' } }
      let ret = s:C.get_branch_remote(config, 'master')
      Assert Equals(ret, 'origin')
    End

    It should return an empty string for invalid branch
      let config = { 'branch "master"': { 'remote': 'origin' } }
      let ret = s:C.get_branch_remote(config, 'invalid')
      Assert Equals(ret, '')
    End
  End

  Context .get_branch_merge({config}, {local_branch})
    It should return a value of merge which the branch connected
      let config = { 'branch "master"': { 'merge': 'refs/heads/origin' } }
      let ret = s:C.get_branch_merge(config, 'master')
      Assert Equals(ret, 'refs/heads/origin')
    End

    It should return a truncated value of merge which the branch connected
      let config = { 'branch "master"': { 'merge': 'refs/heads/origin' } }
      let ret = s:C.get_branch_merge(config, 'master', 1)
      Assert Equals(ret, 'origin')
    End

    It should return an empty string for invalid branch
      let config = { 'branch "master"': { 'merge': 'refs/heads/origin' } }
      let ret = s:C.get_branch_merge(config, 'invalid')
      Assert Equals(ret, '')
    End
  End

  Context .get_remote_url({config}, {remote})
    It should return a url of the specified remote
      let config = { 'remote "origin"': { 'url': 'foo/bar' } }
      let ret = s:C.get_remote_url(config, 'origin')
      Assert Equals(ret, 'foo/bar')
    End

    It should return an empty string for invalid branch
      let config = { 'remote "origin"': { 'url': 'foo/bar' } }
      let ret = s:C.get_remote_url(config, 'invalid')
      Assert Equals(ret, '')
    End
  End

  Context .get_comment_char({config})
    It should return a comment character
      let config = { 'core': { 'commentchar': '%' } }
      let ret = s:C.get_comment_char(config)
      Assert Equals(ret, '%')
    End

    It should return a default comment character (#) if no commenctChar is specified
      let config = { 'core': {} }
      let ret = s:C.get_comment_char(config)
      Assert Equals(ret, '#')

      let config = {}
      let ret = s:C.get_comment_char(config)
      Assert Equals(ret, '#')
    End

    It should return a specified default comment character if no commenctChar is specified
      let config = { 'core': {} }
      let ret = s:C.get_comment_char(config, '&')
      Assert Equals(ret, '&')

      let config = {}
      let ret = s:C.get_comment_char(config, '&')
      Assert Equals(ret, '&')
    End
  End

  Context .system({args} [, {opts}]})
    Before
      let previous_cwd = getcwd()
      silent execute 'lcd ' inside
    End

    After
      silent execute 'lcd ' previous_cwd
    End

    It should execute system command
      let result = s:C.system(['echo', '-n', 'hello'])
      Assert Equals(result.status, 0)
      Assert Equals(result.stdout, 'hello')
      Assert Equals(result.args, ['echo', '-n', 'hello'])
      Assert Equals(result.opts, {'stdin': '', 'timeout': 0})
    End

    It should execute system command with nested {args}
      let result = s:C.system(['echo', ['-n', ['hello']]])
      Assert Equals(result.status, 0)
      Assert Equals(result.stdout, 'hello')
      Assert Equals(result.args, ['echo', '-n', 'hello'])
      Assert Equals(result.opts, {'stdin': '', 'timeout': 0})
    End

  End

  Context .exec({args} [, {opts}])
    Before
      let previous_cwd = getcwd()
      silent execute printf('!git init -q %s', worktree)
      silent execute 'lcd ' inside
    End

    After
      silent execute 'lcd ' previous_cwd
    End

    It should execute git command and return a dictionary
      let result = s:C.exec(['rev-parse', '--show-toplevel'])
      let expect = {
            \ 'status': 0,
            \ 'stdout': resolve(worktree),
            \ 'args': ['git', '-c', 'color.ui=false', '--no-pager', 'rev-parse', '--show-toplevel'],
            \ 'opts': {'stdin': '', 'timeout': 0},
            \}
      Assert Equals(result, expect)
    End
  End

  Context .get_version()
    It should return a git version string
      let git_version = s:C.get_version()
      let result  = s:C.exec(['--version'])
      Assert Equals(
            \ printf('git version %s', git_version),
            \ split(result.stdout, '\v\r?\n')[0]
            \)
    End
  End
End
