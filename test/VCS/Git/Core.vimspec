let s:V = vital#of('vital')
let s:P = s:V.import('System.Filepath')
call s:V.unload() " make sure that the following modules are not cached version
let s:C = s:V.import('VCS.Git.Core')

" Note:
"   The test should be executed on a top directory of git working tree
"   Remember that 'repository' points a '.git' directory and 'worktree'
"   points a directory which contains a '.git' directory.
let s:ROOT = getcwd()

Describe VCS.Git.Core

  Context .config({config})
    It should return a config dictionary
      let config = s:C.config()
      Assert IsDict(config)
    End

    It should extend a config dictionary
      let config = s:C.config({'foo': 'bar'})
      Assert IsDict(config)
      Assert HasKey(config, 'foo')
      Assert Equals(config.foo, 'bar')
    End
  End

  Context .find_worktree({path})
    It should return a top directory path of the working directory
      let path = s:P.join([s:ROOT, 'autoload', 'vital'])
      let exp = s:ROOT
      let ret = s:C.find_worktree(path)
      Assert Equals(ret, exp)
    End
    It should return an empty string for a non git working directory
      let path = s:P.join([s:ROOT, '.git', 'info'])
      let exp = ''
      let ret = s:C.find_worktree(path)
      Assert Equals(ret, exp)
    End
  End

  Context .find_repository({worktree})
    It should return a '.git' directory path of the working directory
      let path = s:ROOT
      let exp = s:P.join([s:ROOT, '.git'])
      let ret = s:C.find_repository(path)
      Assert Equals(ret, exp)
    End

    It should return an empty string for a non git working directory
      let path = s:P.join([s:ROOT, '.git'])
      let exp = ''
      let ret = s:C.find_repository(path)
      Assert Equals(ret, exp)
    End
  End

  Context .get_relative_path(worktree, path)
    It should return a relative path from {worktree} of an absolute {path}
      let worktree = s:ROOT
      let path = s:P.join([s:ROOT, 'autoload', 'vital'])
      let exp = s:P.join(['autoload', 'vital'])
      let ret = s:C.get_relative_path(worktree, path)
      Assert Equals(ret, exp)
    End

    It should return a {path} if {path} is not absolute path
      let worktree = s:ROOT
      let path = s:P.join(['.vim', 'plugin'])
      let exp = path
      let ret = s:C.get_relative_path(worktree, path)
      Assert Equals(ret, exp)
    End
  End

  Context .get_absolute_path(worktree, path)
    It should return an absolute path of a relative {path} from {worktree}
      let worktree = s:ROOT
      let path = s:P.join(['autoload', 'vital'])
      let exp = s:P.join([s:ROOT, 'autoload', 'vital'])
      let ret = s:C.get_absolute_path(worktree, path)
      Assert Equals(ret, exp)
    End

    It should return a {path} if {path} is not relative path
      let worktree = s:ROOT
      let path = s:P.join([expand('~'), '.vim', 'plugin'])
      let exp = path
      let ret = s:C.get_absolute_path(worktree, path)
      Assert Equals(ret, exp)
    End
  End

  Context .get_index_updated_time(repository)
    It should return a number which indicate the updated time of repository index
      let path = s:P.join([s:ROOT, '.git'])
      let ret = s:C.get_index_updated_time(path)
      Assert IsNumber(ret)
    End
  End

  Context .get_current_branch({repository})
    It should return a current branch name of the git repository
      " get a correct value via 'git' command
      let r = s:C.exec(['rev-parse', '--abbrev-ref', 'HEAD'])
      let e = substitute(r.stdout, '\v^[\s\r\n"]*|[\s\r\n"]*$', '', 'g')

      let path = s:P.join([s:ROOT, '.git'])
      let exp = e
      let ret = s:C.get_current_branch(path)
      Assert Equals(ret, exp)
    End
    It should return an empty string for a non git repository
      let path = s:ROOT
      let exp = ''
      let ret = s:C.get_current_branch(path)
      Assert Equals(ret, exp)
    End
  End

  Context .get_cached_commitmsg({repository})
    It should return a cached commit message of the git repository
      Skip 'it is quite difficult to test'
    End

    It should return an empty string for a non git repository
      let path = s:ROOT
      let exp = []
      let ret = s:C.get_cached_commitmsg(path)
      Assert Equals(ret, exp)
    End
  End

  Context .get_config({repository})
    It should return a parsed config dictionary
      let path = s:P.join([s:ROOT, '.git'])
      let ret = s:C.get_config(path)
      Assert HasKey(ret, 'core')
    End

    It should return an empty dictionary for a non git repository
      let path = s:ROOT
      let ret = s:C.get_config(path)
      Assert Equals(ret, {})
    End
  End

  Context .get_branch_remote({config}, {local_branch})
    It should return a name of remote which the branch connected
      let config = { 'branch "master"': { 'remote': 'origin' } }
      let ret = s:C.get_branch_remote(config, 'master')
      Assert Equals(ret, 'origin')
    End

    It should return an empty string for invalid branch
      let config = { 'branch "master"': { 'remote': 'origin' } }
      let ret = s:C.get_branch_remote(config, 'invalid')
      Assert Equals(ret, '')
    End
  End

  Context .get_branch_merge({config}, {local_branch})
    It should return a value of merge which the branch connected
      let config = { 'branch "master"': { 'merge': 'refs/heads/origin' } }
      let ret = s:C.get_branch_merge(config, 'master')
      Assert Equals(ret, 'refs/heads/origin')
    End

    It should return a truncated value of merge which the branch connected
      let config = { 'branch "master"': { 'merge': 'refs/heads/origin' } }
      let ret = s:C.get_branch_merge(config, 'master', 1)
      Assert Equals(ret, 'origin')
    End

    It should return an empty string for invalid branch
      let config = { 'branch "master"': { 'merge': 'refs/heads/origin' } }
      let ret = s:C.get_branch_merge(config, 'invalid')
      Assert Equals(ret, '')
    End
  End

  Context .get_remote_url({config}, {remote})
    It should return a url of the specified remote
      let config = { 'remote "origin"': { 'url': 'foo/bar' } }
      let ret = s:C.get_remote_url(config, 'origin')
      Assert Equals(ret, 'foo/bar')
    End

    It should return an empty string for invalid branch
      let config = { 'remote "origin"': { 'url': 'foo/bar' } }
      let ret = s:C.get_remote_url(config, 'invalid')
      Assert Equals(ret, '')
    End
  End

  Context .get_comment_char({config})
    It should return a comment character
      let config = { 'core': { 'commentchar': '%' } }
      let ret = s:C.get_comment_char(config)
      Assert Equals(ret, '%')
    End

    It should return a default comment character (#) if no commenctChar is specified
      let config = { 'core': {} }
      let ret = s:C.get_comment_char(config)
      Assert Equals(ret, '#')

      let config = {}
      let ret = s:C.get_comment_char(config)
      Assert Equals(ret, '#')
    End

    It should return a specified default comment character if no commenctChar is specified
      let config = { 'core': {} }
      let ret = s:C.get_comment_char(config, '&')
      Assert Equals(ret, '&')

      let config = {}
      let ret = s:C.get_comment_char(config, '&')
      Assert Equals(ret, '&')
    End
  End

  Context .system({args} [, {opts}]})
    It should execute system command
      let result = s:C.system(['echo', '-n', 'hello'])
      Assert Equals(result.status, 0)
      Assert Equals(result.stdout, 'hello')
      Assert Equals(result.args, ['echo', '-n', 'hello'])
      Assert Equals(result.opts, {'stdin': '', 'timeout': 0, 'cwd': ''})
    End

    It should execute system command with nested {args}
      let result = s:C.system(['echo', ['-n', ['hello']]])
      Assert Equals(result.status, 0)
      Assert Equals(result.stdout, 'hello')
      Assert Equals(result.args, ['echo', '-n', 'hello'])
      Assert Equals(result.opts, {'stdin': '', 'timeout': 0, 'cwd': ''})
    End

    It should execute system command on a specified working directory
      let saved_cwd = fnamemodify(getcwd(), ':p')
      let cwd = fnamemodify(expand("$HOME"), ':p')
      if saved_cwd ==# cwd
        let cwd = expand("%:p")
      endif
      " 'pwd' command does not include the last separator thus remove it
      " for comparison
      let cwd = s:P.remove_last_separator(cwd)

      " FIXME Windows does not have 'pwd'
      let result = s:C.system(['pwd'], { 'cwd': cwd })
      Assert Equals(result.status, 0)
      Assert Equals(result.stdout, cwd)
      Assert Equals(result.args, ['pwd'])
      Assert Equals(result.opts, {'stdin': '', 'timeout': 0, 'cwd': cwd})
      Assert Equals(fnamemodify(getcwd(), ':p'), saved_cwd)
    End
  End

  Context .exec({args} [, {opts}])
    It should execute git command and return a dictionary
      let result = s:C.exec(['rev-parse', '--show-toplevel'])
      let expect = {
            \ 'status': 0,
            \ 'stdout': printf("%s", s:ROOT),
            \ 'args': ['git', '-c', 'color.ui=false', 'rev-parse', '--show-toplevel'],
            \ 'opts': {'stdin': '', 'timeout': 0, 'cwd': ''},
            \}
      Assert Equals(result, expect)
    End

    It should execute git command on a specified directory
      let saved_cwd = getcwd()
      silent execute 'lcd ' expand('$HOME')

      let opts = { 'cwd': s:ROOT }
      let result = s:C.exec(['rev-parse', '--show-toplevel'], opts)
      let expect = {
            \ 'status': 0,
            \ 'stdout': printf("%s", s:ROOT),
            \ 'args': ['git', '-c', 'color.ui=false', 'rev-parse', '--show-toplevel'],
            \ 'opts': {'stdin': '', 'timeout': 0, 'cwd': s:ROOT},
            \}
      Assert Equals(result, expect)

      silent execute 'lcd ' saved_cwd
    End

    It should execute git command on a parent directory of a specified file
      let saved_cwd = getcwd()
      silent execute 'lcd ' expand('$HOME')

      let cwd = s:P.join([s:ROOT, 'test', 'VCS', 'Git.vimspec'])
      let opts = { 'cwd': cwd }
      let result = s:C.exec(['rev-parse', '--show-prefix'], opts)
      let expect = {
            \ 'status': 0,
            \ 'stdout': s:P.join(['test', 'VCS']) . s:P.separator(),
            \ 'args': ['git', '-c', 'color.ui=false', 'rev-parse', '--show-prefix'],
            \ 'opts': {'stdin': '', 'timeout': 0, 'cwd': cwd},
            \}
      Assert Equals(result, expect)

      silent execute 'lcd ' saved_cwd
    End
  End
End
